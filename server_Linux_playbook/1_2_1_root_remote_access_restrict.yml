---
- name: 진단 및 조치 - root 계정 원격 접속 제한
  hosts: target_server_PC
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # SSH 관련 변수
    sshd_config_path: "/etc/ssh/sshd_config"
    expected_ssh_line: "PermitRootLogin no"
    vulnerable_ssh_regexp: '^PermitRootLogin\s+(yes|prohibit-password)'
    remediation_ssh_regexp: '^#?PermitRootLogin\s+.*'

    # Telnet/securetty 관련 변수
    securetty_path: "/etc/securetty"
    vulnerable_telnet_regexp: '^pts\/'

    # 보고서 관련
    playbook_name: "1_2c_1_root_remote_access_restrict.yml"
    result_json_path: "/tmp/security_report_root_remote_access.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # SSH 설정 파일 존재 여부 확인
    - name: SSH 설정 파일 확인
      ansible.builtin.stat:
        path: "{{ sshd_config_path }}"
      register: sshd_config_stat

    # SSH 취약점 진단 (grep)
    - name: SSH 취약점 진단
      ansible.builtin.command: "grep -qE '{{ vulnerable_ssh_regexp }}' {{ sshd_config_path }}"
      register: ssh_check
      changed_when: false
      failed_when: false
      ignore_errors: true
      when: sshd_config_stat.stat.exists

    # Telnet 설정 파일 존재 여부 확인
    - name: Telnet 설정 파일 확인
      ansible.builtin.stat:
        path: "{{ securetty_path }}"
      register: securetty_stat

    # Telnet 취약점 진단 (grep)
    - name: Telnet 취약점 진단
      ansible.builtin.command: "grep -qE '{{ vulnerable_telnet_regexp }}' {{ securetty_path }}"
      register: telnet_check
      changed_when: false
      failed_when: false
      ignore_errors: true
      when: securetty_stat.stat.exists

    # 개별 취약점 여부 판단
    - name: 개별 취약점 여부 판단
      ansible.builtin.set_fact:
        is_ssh_vulnerable: "{{ ssh_check.rc == 0 if 'rc' in ssh_check else false }}"
        is_telnet_vulnerable: "{{ telnet_check.rc == 0 if 'rc' in telnet_check else false }}"

    # 최종 취약 여부 종합 판단
    - name: 최종 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ is_ssh_vulnerable or is_telnet_vulnerable }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고 (초기)
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약{% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "{{ playbook_name }}"
          task_description: "root 계정 원격 접속 제한"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ report_timestamp }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details:
            ssh_vulnerable: "{{ is_ssh_vulnerable }}"
            telnet_vulnerable: "{{ is_telnet_vulnerable }}"
            reason: "{{ 'root 계정의 원격 접속(SSH 또는 Telnet)이 허용되어 있습니다.' if is_vulnerable else 'root 계정의 원격 접속이 안전하게 차단되어 있습니다.' }}"
          remediation_tasks_performed: []

    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: root 원격 접속 조치 블록
      block:
        - name: SSH | PermitRootLogin no 설정
          ansible.builtin.lineinfile:
            path: "{{ sshd_config_path }}"
            regexp: "{{ remediation_ssh_regexp }}"
            line: "{{ expected_ssh_line }}"
            state: present
            backup: yes
          register: r_ssh_config
          when: is_ssh_vulnerable

        - name: SSH | 서비스 재시작
          ansible.builtin.service:
            name: "{{ 'sshd' if ansible_facts['os_family'] == 'RedHat' else 'ssh' }}"
            state: restarted
          register: r_ssh_service
          when: r_ssh_config.changed

        - name: Telnet | /etc/securetty 에서 pts/ 라인 제거
          ansible.builtin.lineinfile:
            path: "{{ securetty_path }}"
            regexp: "^{{ vulnerable_telnet_regexp }}"
            state: absent
            backup: yes
          register: r_telnet
          when: is_telnet_vulnerable
      when: is_vulnerable

    # 5. 조치 결과 보고
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: >-
          {{ (r_ssh_config.changed | default(false)) or
             (r_ssh_service.changed | default(false)) or
             (r_telnet.changed | default(false)) }}
        remediation_tasks_performed: >-
          {{ (['SSH PermitRootLogin 설정 변경'] if r_ssh_config.changed | default(false) else []) +
             (['SSH 서비스 재시작'] if r_ssh_service.changed | default(false) else []) +
             (['Telnet securetty pts 제거'] if r_telnet.changed | default(false) else []) }}
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료{% elif not is_vulnerable %}조치 불필요 (양호){% else %}조치 실패{% endif %}"
      when: not ansible_check_mode

    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable