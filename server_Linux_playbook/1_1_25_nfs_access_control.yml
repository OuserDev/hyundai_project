---
- name: 진단 및 조치 - NFS 접근 통제 설정
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 파일 ---
    exports_file: "/etc/exports"

    # --- 보고서 관련 ---
    playbook_name: "1_1_25_nfs_access_control.yml"
    result_json_path: "/tmp/security_report_nfs_access_control.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # /etc/exports 파일 존재 여부 확인
    - name: /etc/exports 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ exports_file }}"
      register: exports_file_stat

    # /etc/exports 파일에서 '*' (everyone) 공유 설정 라인 검색
    - name: /etc/exports 파일 내 '*' 공유 설정 진단
      ansible.builtin.shell: "grep -E '^\\s*[^#].*\\s+\\*(\\s|$|\\()' {{ exports_file }}"
      register: exports_check
      changed_when: false
      failed_when: false
      when: exports_file_stat.stat.exists
      ignore_errors: true

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        # grep 명령어가 성공하면(rc=0) 취약한 라인을 찾은 것임
        is_vulnerable: "{{ exports_check.rc == 0 if 'rc' in exports_check else false }}"
        vulnerable_lines: "{{ exports_check.stdout_lines | default([]) }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (모든 IP에 허용된 NFS 공유 발견){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "NFS 접근 통제 설정",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "NFS 공유가 모든 IP('*')에 허용되도록 설정되어 있습니다." if is_vulnerable else "NFS 공유가 특정 호스트/IP에만 허용되도록 설정되어 있습니다.",
                "vulnerable_lines_found": vulnerable_lines
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치 (수동 조치 안내)
    # 자동으로 설정을 변경하지 않고, 사용자에게 필요한 조치를 안내
    - name: 필요한 수동 조치 안내
      ansible.builtin.debug:
        msg:
          - "보안 취약점이 발견되었습니다. 아래의 NFS 공유 설정을 수동으로 점검해야 합니다."
          - "취약한 설정 라인:"
          - "{{ vulnerable_lines }}"
          - "조치 방법:"
          - "  - /etc/exports 파일을 열어 위 라인을 찾습니다."
          - "  - '*' 부분을 실제로 접속해야 하는 특정 IP 주소나 네트워크 대역(예: 192.168.1.0/24)으로 변경하십시오."
          - "  - 수정 후 'exportfs -ra' 명령어를 실행하여 설정을 다시 불러오십시오."
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록 (자동 조치가 없으므로 '수동 조치 필요'로 기록)
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: false
        remediation_tasks_performed: "{{ ['수동 조치 필요'] if is_vulnerable else [] }}"
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable