---
- name: 진단 및 조치 - 소유자 없는 파일 및 디렉터리 관리
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    result_json_path: "/tmp/security_report_orphan_files.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # 시스템 전체에서 소유자 또는 그룹이 없는 파일/디렉터리를 검색합니다. (/proc, /sys 등 가상 파일시스템은 제외)
    - name: 소유자 없는 파일 및 디렉터리 검색
      ansible.builtin.shell: "find / \\( -path /proc -o -path /sys \\) -prune -o \\( -nouser -o -nogroup \\) -print 2>/dev/null"
      register: orphan_files_check
      changed_when: false
      failed_when: false

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ orphan_files_check.stdout_lines | length > 0 }}"
        orphan_files_list: "{{ orphan_files_check.stdout_lines }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고 (초기)
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (소유자 없는 파일 {{ orphan_files_list | length }}개 발견){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성
    - name: 초기 JSON 보고서 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "1_1_7_orphan_file_ownership.yml"
          task_description: "소유자 없는 파일 및 디렉터리 관리"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ report_timestamp }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details:
            reason: "{% if is_vulnerable %}시스템에 소유자나 그룹이 없는 파일 또는 디렉터리가 발견되었습니다.{% else %}모든 파일 및 디렉터리의 소유자 정보가 정상입니다.{% endif %}"
            file_list: "{{ orphan_files_list }}"
          remediation_tasks_performed: []

    # 초기 JSON 보고서 파일로 저장
    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'

    # 4. 조치 (수동 조치 안내)
    # 자동으로 파일을 삭제하거나 수정하지 않고, 사용자에게 필요한 조치를 안내합니다.
    - name: 필요한 수동 조치 안내
      ansible.builtin.debug:
        msg:
          - "취약점이 발견되었습니다. 아래 목록의 파일들을 수동으로 점검해야 합니다."
          - "파일 목록: {{ orphan_files_list }}"
          - "조치 방법:"
          - "  - 불필요한 파일인 경우: 'sudo rm <파일경로>' 명령어로 삭제하십시오."
          - "  - 필요한 파일인 경우: 'sudo chown <사용자>:<그룹> <파일경로>' 명령어로 소유자를 변경하십시오."
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록 (자동 조치가 없으므로 '수동 조치 필요'로 기록)
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: false # 자동 조치를 수행하지 않았으므로 false
        remediation_tasks_performed: "{{ ['수동 조치 필요'] if is_vulnerable else [] }}"
      when: is_vulnerable

    # 조치 결과를 콘솔에 출력
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if is_vulnerable %}수동 조치 필요{% else %}조치 불필요 (양호){% endif %}"
      when: not ansible_check_mode

    # JSON 보고서에 조치 결과 추가
    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
            'remediation_timestamp': report_timestamp,
            'remediation_tasks_performed': remediation_tasks_performed
          }, recursive=True) }}"
      when: not ansible_check_mode and is_vulnerable

    # 최종 JSON 보고서 파일 덮어쓰기
    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      when: not ansible_check_mode and is_vulnerable