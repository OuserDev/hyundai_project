---
- name: 진단 및 조치 - 패스워드의 주기적 변경
  hosts: target_server_PC
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 설정 목표 ---
    max_days: 90
    min_days: 1   # 최소 사용 기간 (보통 1일로 설정)
    warn_age: 7   # 만료 경고 기간 (보통 7일로 설정)

    # --- 설정 파일 ---
    login_defs_file: "/etc/login.defs"

    # --- 보고서 관련 ---
    playbook_name: "1_2_2_password_periodical_change.yml"
    result_json_path: "/tmp/security_report_password_periodical_change.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # login.defs와 모든 일반 사용자의 패스워드 최대 사용 기간을 진단
    - name: 패스워드 최대 사용 기간 진단
      ansible.builtin.shell: |
        # login.defs의 PASS_MAX_DAYS가 {{ max_days }} 이하인지 확인
        MAX_DAYS_DEFAULT=$(grep -E "^\s*PASS_MAX_DAYS" {{ login_defs_file }} | awk '{print $2}')
        if [ -z "$MAX_DAYS_DEFAULT" ] || [ "$MAX_DAYS_DEFAULT" -gt {{ max_days }} ]; then
          exit 1
        fi
        # 일반 사용자 중 한 명이라도 최대 사용 기간이 90일을 초과하는지 확인
        for user in $(getent passwd | awk -F: '$3 >= 1000 && $7 !~ /(nologin|false)$/ {print $1}'); do
          user_max_days=$(chage -l "$user" | grep 'Maximum number' | cut -d: -f2 | xargs)
          if [ -n "$user_max_days" ] && [ "$user_max_days" -gt {{ max_days }} ]; then
            exit 1
          fi
        done
        exit 0
      args:
        executable: /bin/bash
      register: max_days_check
      changed_when: false
      failed_when: false

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ max_days_check.rc != 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (패스워드 최대 사용 기간이 90일을 초과){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "패스워드의 주기적 변경",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: 패스워드 사용 기간 조치 블록
      block:
        - name: login.defs 기본값 설정
          ansible.builtin.lineinfile:
            path: "{{ login_defs_file }}"
            regexp: '^{{ item.key }}\s+'
            line: "{{ item.key }}\t{{ item.value }}"
            state: present
            backup: yes
          loop:
            - { key: 'PASS_MAX_DAYS', value: "{{ max_days }}" }
            - { key: 'PASS_MIN_DAYS', value: "{{ min_days }}" }
            - { key: 'PASS_WARN_AGE', value: "{{ warn_age }}" }
          register: login_defs_change

        - name: 일반 사용자 목록 가져오기
          ansible.builtin.getent:
            database: passwd
          register: all_users_info

        - name: 일반 사용자 필터링
          ansible.builtin.set_fact:
            regular_users: "{{ result_string | from_yaml }}"
          vars:
            result_string: |
              {% set users = [] %}
              {# all_users_info 변수는 이 태스크 이전에 getent 모듈로 생성되어 있어야 합니다. #}
              {% for username, data in (all_users_info.ansible_facts.getent_passwd | default({})).items() %}
                {# [핵심] UID(data[1])를 숫자로 변환(| int)하여 1000 이상인지 비교합니다. #}
                {% if data[1] | int >= 1000 and data[5] is not in ['/usr/sbin/nologin', '/bin/false'] %}
                  {# 필요한 정보에 따라 사용자 이름만, 또는 딕셔너리 형태로 추가할 수 있습니다. #}
                  {% set _ = users.append(username) %}
                {% endif %}
              {% endfor %}
              {{ users }}

        - name: 기존 사용자에 사용 기간 적용
          ansible.builtin.command: "chage -M {{ max_days }} -m {{ min_days }} -W {{ warn_age }} {{ item }}"
          loop: "{{ regular_users }}"
          register: chage_change
          changed_when: true # chage는 항상 변경으로 간주하여 보고

      when: is_vulnerable

    # 5. 조치 결과 보고
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ (login_defs_change.changed | default(false)) or (chage_change.results | selectattr('changed', 'equalto', true) | list | length > 0) }}"
        remediation_tasks_performed: >-
          {{ (['login.defs 정책 변경'] if login_defs_change.changed | default(false) else []) +
             (['기존 사용자 정책 변경'] if (chage_change.results | selectattr('changed', 'equalto', true) | list | length > 0) else []) }}
      when: is_vulnerable

    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable