---
- name: 진단 및 조치 - 패스워드 복잡성 설정 (PC리눅스)
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # [요청사항] 테스트를 위한 패스워드 복잡도 설정
    password_settings:
      minlen: 6   # 최소 길이 6자
      lcredit: -1  # 소문자 최소 1개
      ucredit: 0   # 대문자 요구사항 없음
      dcredit: 0   # 숫자 요구사항 없음
      ocredit: 0   # 특수문자 요구사항 없음
      minclass: 1  # 1개 종류의 문자만 사용 가능

    # OS 계열별 PAM 설정 파일 경로
    pam_file_debian: "/etc/pam.d/common-password"
    pam_file_rhel: "/etc/pam.d/system-auth"

    # 보고서 관련
    playbook_name: "1_2_3_password_complexity.yml"
    result_json_path: "/tmp/security_report_password_complexity.json"
    remediation_tasks_performed: []
    manual_remediation_guide: "수동으로 /etc/pam.d/ 내의 common-password 또는 system-auth 파일을 열어, password requisite pam_pwquality.so 라인의 옵션을 정책에 맞게 수정하십시오."

  tasks:
    # 2. 진단
    # OS 계열에 따라 사용할 설정 파일 결정
    - name: OS 계열별 PAM 설정 파일 경로 설정
      ansible.builtin.set_fact:
        found_pam_file: "{{ pam_file_rhel if ansible_facts['os_family'] == 'RedHat' else pam_file_debian }}"

    # 패스워드 복잡도 설정 진단
    - name: 현재 패스워드 복잡도 설정 진단
      ansible.builtin.shell: |
        LINE=$(grep -E "pam_pwquality.so|pam_cracklib.so" "{{ found_pam_file }}")
        if [ -z "$LINE" ]; then exit 1; fi

        # 목표 설정값과 현재 설정값을 비교
        check_setting() {
            local setting=$1
            local target_value=$2
            local current_value=$(echo "$LINE" | grep -o "$setting=[^ ]*" | cut -d= -f2)
            
            # 설정이 없거나, 목표치와 다르면 취약(1)
            if [ -z "$current_value" ] || [ "$current_value" != "$target_value" ]; then
                exit 1
            fi
        }

        check_setting "minlen" "{{ password_settings.minlen }}"
        check_setting "lcredit" "{{ password_settings.lcredit }}"
        check_setting "ucredit" "{{ password_settings.ucredit }}"
        check_setting "dcredit" "{{ password_settings.dcredit }}"
        check_setting "ocredit" "{{ password_settings.ocredit }}"
        check_setting "minclass" "{{ password_settings.minclass }}"

        exit 0 # 모든 검사를 통과하면 양호(0)
      args:
        executable: /bin/bash
      register: complexity_check
      changed_when: false
      failed_when: false
      ignore_errors: true # 파일이 없는 경우 등 대비

    # 취약 여부 종합 판단
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ complexity_check.rc != 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (패스워드 복잡도 설정이 기준과 다름){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성
    - name: 초기 JSON 보고서 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "{{ playbook_name }}"
          task_description: "패스워드 복잡성 설정"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ report_timestamp }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details:
            reason: "{{ '패스워드 복잡도 설정이 요구사항과 일치하지 않습니다.' if is_vulnerable else '패스워드 복잡도 설정이 요구사항과 일치합니다.' }}"
            required_settings: "{{ password_settings }}"
          remediation_tasks_performed: []

    # 초기 JSON 보고서 파일 저장
    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # 패스워드 복잡도 설정 조치
    - name: 패스워드 복잡도 설정 적용
      ansible.builtin.lineinfile:
        path: "{{ found_pam_file }}"
        regexp: '.*(pam_pwquality\.so|pam_cracklib\.so).*'
        line: "password requisite pam_pwquality.so retry=3 minlen={{ password_settings.minlen }} lcredit={{ password_settings.lcredit }} ucredit={{ password_settings.ucredit }} dcredit={{ password_settings.dcredit }} ocredit={{ password_settings.ocredit }} minclass={{ password_settings.minclass }}"
        state: present
        backup: yes
      register: pam_config_change
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ pam_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['PAM 설정 변경'] if pam_config_change.changed | default(false) else [] }}"
      when: is_vulnerable

    # 조치 결과를 콘솔에 출력
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}
      when: not ansible_check_mode

    # 최종 JSON 보고서에 조치 결과 추가
    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패 (수동 조치 필요)'),
            'remediation_timestamp': report_timestamp,
            'remediation_tasks_performed': remediation_tasks_performed | default([]),
            'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
          }, recursive=True) }}"
      when: not ansible_check_mode

    # 최종 JSON 보고서 파일 덮어쓰기
    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode