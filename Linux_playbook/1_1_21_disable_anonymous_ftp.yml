---
- name: 진단 및 조치 - Anonymous FTP 비활성화
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 ---
    vsftpd_conf_file: "/etc/vsftpd.conf"
    proftpd_conf_file: "/etc/proftpd/proftpd.conf" # 또는 /etc/proftpd.conf
    passwd_file: "/etc/passwd"
    ftp_user_name: "ftp"

    # --- 보고서 관련 ---
    playbook_name: "1_1_21_disable_anonymous_ftp.yml"
    result_json_path: "/tmp/security_report_anonymous_ftp.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # 진단 2.1: vsftpd 설정 확인
    - name: vsftpd 설정 확인 (anonymous_enable=YES)
      ansible.builtin.shell: "grep -qE '^\\s*anonymous_enable\\s*=\\s*YES' {{ vsftpd_conf_file }}"
      register: vsftpd_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    # 진단 2.2: proftpd 설정 확인
    - name: proftpd 설정 확인 (<Anonymous ~ftp>)
      ansible.builtin.shell: "grep -qE '^\\s*<Anonymous\\s+~ftp>' {{ proftpd_conf_file }}"
      register: proftpd_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    # 진단 2.3: ftp 계정 존재 확인
    - name: ftp 계정 존재 여부 확인
      ansible.builtin.shell: "grep -qE '^(ftp|anonymous):' {{ passwd_file }}"
      register: ftp_user_check
      changed_when: false
      failed_when: false

    # 진단 결과 종합 판단
    - name: 개별 취약점 여부 판단
      ansible.builtin.set_fact:
        is_vsftpd_vuln: "{{ vsftpd_check.rc == 0 if 'rc' in vsftpd_check else false }}"
        is_proftpd_vuln: "{{ proftpd_check.rc == 0 if 'rc' in proftpd_check else false }}"
        is_ftp_user_vuln: "{{ ftp_user_check.rc == 0 if 'rc' in ftp_user_check else false }}"

    - name: 최종 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ is_vsftpd_vuln or is_proftpd_vuln or is_ftp_user_vuln }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (Anonymous FTP 관련 설정 또는 계정 발견){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Anonymous FTP 비활성화",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "Anonymous FTP를 허용하는 설정 또는 계정이 발견되었습니다." if is_vulnerable else "Anonymous FTP가 비활성화되어 있습니다.",
                "details": (["vsftpd: anonymous_enable=YES 설정됨"] if is_vsftpd_vuln else []) +
                           (["proftpd: <Anonymous> 블록 발견됨"] if is_proftpd_vuln else []) +
                           (["시스템에 ftp 또는 anonymous 계정 존재"] if is_ftp_user_vuln else [])
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # 각 취약점 원인에 따라 개별적으로 조치
    - name: Anonymous FTP 조치 블록
      block:
        - name: vsftpd 조치 (anonymous_enable=NO)
          ansible.builtin.lineinfile:
            path: "{{ vsftpd_conf_file }}"
            regexp: '^\s*anonymous_enable\s*=\s*YES'
            line: 'anonymous_enable=NO'
            backup: yes
          register: vsftpd_remediation
          when: is_vsftpd_vuln

        - name: proftpd 조치 (수동 안내)
          ansible.builtin.debug:
            msg: "경고: ProFTPD의 <Anonymous> 블록이 확인되었습니다. 보안을 위해 해당 블록을 /etc/proftpd/proftpd.conf 파일에서 직접 검토하고 제거하거나 주석 처리하십시오."
          when: is_proftpd_vuln

        - name: ftp 계정 조치 (계정 삭제)
          ansible.builtin.user:
            name: "{{ ftp_user_name }}"
            state: absent
            remove: yes # 홈 디렉터리 등 관련 파일 모두 삭제
          register: ftp_user_remediation
          when: is_ftp_user_vuln
          ignore_errors: true

     # 5. 조치 결과 보고
    # 조치 후 정말 ftp 계정이 삭제되었는지 재확인
    - name: 조치 후 ftp 계정 존재 여부 재확인
      ansible.builtin.shell: "grep -qE '^(ftp|anonymous):' {{ passwd_file }}"
      register: post_check_ftp_user
      changed_when: false
      failed_when: false
      when: is_ftp_user_vuln

    # 각 조치의 성공 여부를 먼저 개별 플래그 변수로 설정
    - name: 개별 조치 성공 여부 플래그 설정
      ansible.builtin.set_fact:
        vsftpd_remediated_flag: "{{ vsftpd_remediation.changed | default(false) if vsftpd_remediation is defined else false }}"
        ftp_user_remediated_flag: "{{ post_check_ftp_user.rc != 0 if post_check_ftp_user is defined else false }}"
      when: is_vulnerable

    # 위에서 만든 플래그들을 사용하여 조치 결과 최종 종합
    - name: 수행된 조치 작업 기록 및 결과 종합
      ansible.builtin.set_fact:
        remediation_done: "{{ vsftpd_remediated_flag or ftp_user_remediated_flag }}"
        remediation_tasks_performed: >-
          {{ (['vsftpd 설정 변경'] if vsftpd_remediated_flag else []) +
            (['ftp 계정 삭제'] if ftp_user_remediated_flag else []) +
            (['proftpd 수동 조치 필요'] if is_proftpd_vuln else []) }}
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('수동 조치 필요' if is_proftpd_vuln else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable