---
- name: 진단 및 조치 - 로그의 정기적인 검토 및 백업
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    logrotate_config_file: "/etc/logrotate.conf"
    logrotate_cron_file: "/etc/cron.daily/logrotate"
    playbook_name: "1_1_36_log_review_backup.yml"
    result_json_path: "/tmp/security_report_log_review_backup.json"
    remediation_tasks_performed: []
    # 조치 실패 시를 위한 수동 조치 가이드 정의
    manual_remediation_guide: "apt-get install --reinstall -y logrotate 명령어를 실행하여 패키지를 재설치하십시오."

  tasks:
    # 2. 진단
    - name: 진단 전 파일 상태 확인
      ansible.builtin.stat:
        path: "{{ logrotate_cron_file }}"
      register: pre_check_cron_stat

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ not pre_check_cron_stat.stat.exists }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (logrotate 설정 미흡){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "로그의 정기적인 검토 및 백업",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "로그 관리 도구(logrotate)가 매일 실행되도록 설정되어 있지 않습니다." if is_vulnerable else "로그 관리 도구가 올바르게 설정되어 있습니다."
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: logrotate 패키지 재설치 시도
      ansible.builtin.command: "apt-get install --reinstall -y logrotate"
      register: package_remediation
      changed_when: false
      when: is_vulnerable

    # 5. 조치 결과 보고
    - name: 조치 후 파일 존재 여부 재확인
      ansible.builtin.stat:
        path: "{{ logrotate_cron_file }}"
      register: post_check_cron_stat
      when: is_vulnerable

    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ post_check_cron_stat.stat.exists | default(false) }}"
        remediation_tasks_performed: "{{ ['logrotate 패키지 재설치'] if (post_check_cron_stat.stat.exists | default(false)) else [] }}"
      when: is_vulnerable

    # 조치 실패 시 수동 가이드를 포함
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}
      when: not ansible_check_mode

    # JSON 보고서에도 수동 가이드 포함
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패 (수동 조치 필요)'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode