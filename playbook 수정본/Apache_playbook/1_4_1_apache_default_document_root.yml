- name: Apache 기본 DocumentRoot 사용 여부 진단
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "apache_default_document_root.yml"
    result_json_path: "/tmp/security_report_apache_default_document_root.json"
    # OS별 Apache 설정 정의
    apache_bin: "{{ 'httpd' if ansible_facts['os_family'] == 'RedHat' else 'apache2' }}"
    apache_config_paths: "{{ ['/etc/httpd/conf', '/etc/httpd/conf.d'] if ansible_facts['os_family'] == 'RedHat' else ['/etc/apache2/sites-enabled', '/etc/apache2/apache2.conf'] }}"
    manual_remediation_guide: "Apache의 기본 DocumentRoot(/var/www/html) 사용을 중지하고 서비스별 전용 디렉터리를 사용하도록 변경하십시오. 예: 1.mkdir -p /var/www/new_service 2.Apache 설정 파일의 'DocumentRoot /var/www/html'을 'DocumentRoot /var/www/new_service'로 수정 3.apachectl configtest && systemctl restart {{ apache_bin }}"

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Apache 설치 여부)
    # ----------------------------------------------------------------
    - name: Apache 설치 여부 확인 (사전 확인)
      ansible.builtin.command: "which {{ apache_bin }}"
      register: apache_installed
      changed_when: false
      failed_when: false

    - name: Apache 미설치 시 작업 종료
      when: apache_installed.rc != 0
      block:
        - name: Apache 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "Apache가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: 기본 DocumentRoot(/var/www/html) 사용 여부 진단
      ansible.builtin.shell: "grep -r -E '^\\s*DocumentRoot\\s+/var/www/html\\s*$' {{ apache_config_paths | join(' ') }} 2>/dev/null | grep ."
      register: docroot_check
      changed_when: false
      failed_when: false

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ docroot_check.stdout_lines | length > 0 }}"
        vulnerable_configs: "{{ docroot_check.stdout_lines | default([]) | unique }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (기본 DocumentRoot 사용 설정 발견){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Apache 기본 DocumentRoot 사용 여부 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "웹 서비스 격리 원칙에 위배되는 기본 DocumentRoot(/var/www/html)를 사용하고 있습니다." if is_vulnerable else "서비스별 DocumentRoot가 적절히 설정되어 있습니다.",
                "vulnerable_configurations": vulnerable_configs
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 자동 조치 건너뛰기 알림
      ansible.builtin.debug:
        msg: "이 항목은 웹 서비스 중단을 유발할 수 있어 자동 조치를 수행하지 않습니다. 수동 조치가 필요합니다."
      when: is_vulnerable

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록 (수동 조치 필요)
      ansible.builtin.set_fact:
        remediation_done: false
        remediation_tasks_performed: ["자동 조치 미수행 (수동 조치 필요)"]
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          취약한 설정 라인:
          {% for line in vulnerable_configs %}
          - {{ line }}
          {% endfor %}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': false,
              'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if is_vulnerable else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes