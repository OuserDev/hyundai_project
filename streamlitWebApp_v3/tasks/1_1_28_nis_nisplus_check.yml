---
- name: 진단 및 조치 - NIS, NIS+ 서비스 비활성화
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 및 조치 대상 ---
    # 진단 시 확인할 프로세스 이름 패턴
    nis_process_pattern: "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated"
    # 조치 시 비활성화할 서비스 이름 목록
    nis_service_names:
      - nis
      - ypbind
      - ypserv
      - yppasswdd

    # --- 보고서 관련 ---
    playbook_name: "1_1_28_nis_nisplus_check.yml"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # ps 명령어로 NIS 관련 프로세스가 실행 중인지 확인
    - name: NIS/NIS+ 관련 데몬 실행 여부 진단
      ansible.builtin.shell: "ps -ef | grep -E '{{ nis_process_pattern }}' | grep -v 'grep'"
      register: nis_process_check
      changed_when: false
      failed_when: false
      ignore_errors: true # 프로세스가 없으면 rc=1이 되므로 오류 무시

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        # grep 명령어의 리턴 코드가 0이면(프로세스를 찾으면) '취약'
        is_vulnerable: "{{ nis_process_check.rc == 0 }}"
        vulnerable_processes: "{{ nis_process_check.stdout_lines | default([]) }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (NIS/NIS+ 서비스 활성화됨){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "NIS, NIS+ 서비스 비활성화",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "보안에 취약한 NIS/NIS+ 서비스가 활성화되어 있습니다." if is_vulnerable else "NIS/NIS+ 서비스가 비활성화되어 있거나 설치되지 않았습니다.",
                "running_processes": vulnerable_processes
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # 관련된 systemd 서비스를 모두 중지하고 비활성화
    - name: NIS/NIS+ 관련 서비스 비활성화 및 중지
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: no
        state: stopped
      loop: "{{ nis_service_names }}"
      register: service_remediation
      when: is_vulnerable
      ignore_errors: true # 목록에 없는 서비스는 오류를 무시

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ service_remediation.results | selectattr('changed', 'equalto', true) | list | length > 0 }}"
        remediation_tasks_performed: "{{ ['NIS/NIS+ 관련 서비스 비활성화/중지'] if (service_remediation.results | selectattr('changed', 'equalto', true) | list | length > 0) else [] }}"
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else '조치 실패',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable