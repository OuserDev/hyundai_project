---
- name: 진단 및 조치 - Nginx 디렉터리 리스팅 비활성화
  hosts: PostWebServers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 경로 ---
    nginx_sites_enabled: "/etc/nginx/sites-enabled"
    
    # --- 보고서 관련 ---
    playbook_name: "1_5_5_directory_listing_check.yml"
    result_json_path: "/tmp/security_report_directory_listing.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # 진단 2.1: Nginx 패키지 설치 여부 확인
    - name: Nginx 패키지 설치 여부 확인
      ansible.builtin.package_facts:
        manager: auto
      register: package_facts

    - name: Nginx 설치 상태 확인
      ansible.builtin.set_fact:
        is_nginx_installed: "{{ 'nginx' in ansible_facts.packages }}"

    # 진단 2.2: Nginx 서비스 상태 확인
    - name: Nginx 서비스 상태 확인
      ansible.builtin.systemd:
        name: nginx
      register: nginx_service_check
      ignore_errors: true
      when: is_nginx_installed

    - name: Nginx 서비스 실행 상태 설정 (설치된 경우)
      ansible.builtin.set_fact:
        is_nginx_running: "{{ nginx_service_check.status.ActiveState == 'active' if nginx_service_check.status is defined else false }}"
      when: is_nginx_installed

    - name: Nginx 서비스 실행 상태 설정 (미설치된 경우)
      ansible.builtin.set_fact:
        is_nginx_running: false
      when: not is_nginx_installed

    # 진단 2.3: sites-enabled 디렉터리 존재 확인
    - name: sites-enabled 디렉터리 존재 확인
      ansible.builtin.stat:
        path: "{{ nginx_sites_enabled }}"
      register: sites_enabled_stat
      when: is_nginx_installed

    # 진단 2.4: sites-enabled 내 모든 .conf 파일 조회
    - name: sites-enabled 내 설정 파일 목록 조회
      ansible.builtin.find:
        paths: "{{ nginx_sites_enabled }}"
        patterns: "*.conf"
        file_type: file
      register: nginx_conf_files
      when: is_nginx_installed and sites_enabled_stat.stat.exists

    # 진단 2.5: 각 설정 파일에서 autoindex 설정 확인
    - name: 각 설정 파일의 autoindex 설정 확인
      ansible.builtin.shell: |
        # autoindex on이 명시적으로 설정되어 있는지 확인
        if grep -qE '^\s*autoindex\s+on\s*;' "{{ item.path }}"; then
          echo "VULNERABLE_ON"
          exit 0
        fi
        # autoindex off가 명시적으로 설정되어 있는지 확인
        if grep -qE '^\s*autoindex\s+off\s*;' "{{ item.path }}"; then
          echo "SAFE_OFF"
          exit 0
        fi
        # autoindex 설정이 없는 경우 (기본값은 off이지만 명시적 설정 권장)
        echo "NO_SETTING"
        exit 0
      loop: "{{ nginx_conf_files.files | default([]) }}"
      register: autoindex_check_results
      changed_when: false
      when: is_nginx_installed and nginx_conf_files.files is defined

    # 진단 2.6: 메인 nginx.conf 파일의 autoindex 설정 확인 - 제거됨

    # 진단 결과 분석
    - name: 취약한 설정 파일 목록 생성
      ansible.builtin.set_fact:
        vulnerable_conf_files: >-
          {%- set vuln_files = [] -%}
          {%- if autoindex_check_results.results is defined -%}
            {%- for result in autoindex_check_results.results -%}
              {%- if result.stdout == 'VULNERABLE_ON' -%}
                {%- set _ = vuln_files.append({
                  'path': result.item.path, 
                  'reason': 'autoindex on으로 설정됨'
                }) -%}
              {%- elif result.stdout == 'NO_SETTING' -%}
                {%- set _ = vuln_files.append({
                  'path': result.item.path, 
                  'reason': 'autoindex 설정 없음 (명시적 설정 권장)'
                }) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ vuln_files }}

    # 최종 취약 여부 종합 판단
    - name: 최종 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ is_nginx_installed and (vulnerable_conf_files | length > 0) }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          진단결과: {% if not is_nginx_installed %}양호 (Nginx 미설치){% elif is_vulnerable %}취약 (디렉터리 리스팅 설정 문제){% else %}양호{% endif %}
          {% if is_nginx_installed %}
            - Nginx 설치 상태: 설치됨
            - Nginx 서비스 상태: {{ 'Running' if is_nginx_running else 'Stopped' }}
            - 취약한 설정 파일 수: {{ vulnerable_conf_files | length }}개
          {% endif %}

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 디렉터리 리스팅 비활성화",
              "diagnosis_result": "양호 (Nginx 미설치)" if not is_nginx_installed else ("취약" if is_vulnerable else "양호"),
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "nginx_installed": is_nginx_installed,
                "nginx_running": is_nginx_running,
                "reason": ("Nginx가 설치되지 않았습니다." if not is_nginx_installed else 
                          ("일부 Nginx 설정 파일에서 디렉터리 리스팅이 활성화되어 있거나 명시적으로 비활성화되지 않았습니다." if is_vulnerable else 
                           "모든 Nginx 설정 파일에서 디렉터리 리스팅이 안전하게 설정되어 있습니다.")),
                "vulnerable_config_files": vulnerable_conf_files if is_nginx_installed else []
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: Nginx 디렉터리 리스팅 조치 블록
      block:
        # 4.1: sites-enabled 내 취약한 설정 파일들 조치
        - name: sites-enabled 설정 파일에 autoindex off 추가/수정
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regexp: '^\s*autoindex\s+(on|off)\s*;'
            line: '    autoindex off;'
            insertafter: 'server\s*{'
            backup: yes
            state: present
          loop: "{{ vulnerable_conf_files }}"
          register: sites_autoindex_remediation
          when: vulnerable_conf_files | length > 0

        # 4.2: 메인 nginx.conf 파일 조치 - 제거됨

        # 4.3: Nginx 설정 구문 검사
        - name: Nginx 설정 구문 검사
          ansible.builtin.command: nginx -t
          register: nginx_config_test
          changed_when: false
          failed_when: false

        # 4.4: 설정이 올바른 경우 Nginx 서비스 재로드
        - name: Nginx 서비스 재로드
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
          register: nginx_reload
          when: 
            - nginx_config_test.rc == 0
            - is_nginx_running
            - sites_autoindex_remediation.changed | default(false)

      when: is_vulnerable and is_nginx_installed

    # 5. 조치 결과 보고
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ sites_autoindex_remediation.changed | default(false) }}"
        remediation_tasks_performed: >-
          {{ (['Nginx 설정 파일 수정'] if (sites_autoindex_remediation.changed | default(false)) else []) +
             (['Nginx 서비스 재로드'] if (nginx_reload.changed | default(false)) else []) }}
      when: is_vulnerable and is_nginx_installed

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if not is_nginx_installed %}조치 불필요 (Nginx 미설치)
          {% elif remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패{% endif %}
          {% if nginx_config_test is defined and nginx_config_test.rc is defined %}
          Nginx 설정 검사: {{ 'PASS' if nginx_config_test.rc == 0 else 'FAIL' }}
          {% endif %}
      when: not ansible_check_mode

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': ('조치 불필요 (Nginx 미설치)' if not is_nginx_installed else 
                                   ('조치 완료' if (remediation_done | default(false)) else 
                                   ('조치 불필요' if not is_vulnerable else '조치 실패'))),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'nginx_config_test_result': nginx_config_test.rc if (nginx_config_test is defined and nginx_config_test.rc is defined) else -1
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode