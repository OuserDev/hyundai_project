---
- name: 진단 및 조치 - Nginx 불필요한 파일 존재 여부 확인
  hosts: PostWebServers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 디렉터리 목록 ---
    nginx_directories:
      - "/etc/nginx"
      - "/var/www"
      - "/usr/share/nginx"
      - "/var/log/nginx"

    # --- 점검할 불필요한 파일 패턴 ---
    unnecessary_file_patterns:
      - "*.old"
      - "*.bak"
      - "*.backup"
      - "*.orig"
      - "*.save"
      - "*.tmp"
      - "*.temp"
      - "*~"
      - "*.swp"
      - "*.swo"
      - "#*#"
      - ".#*"
      - "*.test"
      - "test.*"
      - "*.example"
      - "example.*"
      - "*.sample"
      - "sample.*"
      - "*.default"
      - "default.*"
      - "*.dist"
      - "*.dpkg-old"
      - "*.dpkg-new"
      - "*.dpkg-dist"
      - "*.rpm-save"
      - "*.rpm-new"

    # --- 특정 위험한 파일명 패턴 (nginx 설정 디렉터리에만 적용) ---
    dangerous_file_patterns_nginx_config:
      - "*.php"
      - "*.pl"
      - "*.py"
      - "*.sh"
      - "*.cgi"
      - "*.asp"
      - "*.jsp"
      - "*.exe"

    # --- 알려진 위험한 테스트/정보 노출 파일명 (웹 디렉터리용) ---
    risky_web_files:
      - "phpinfo.php"
      - "info.php"
      - "test.php"
      - "test.html"
      - "admin.php"
      - "phpmyadmin.php"
      - "mysql.php"
      - "database.php"
      - "config.php"
      - "configuration.php"
      - "connect.php"
      - "connection.php"
      - "db.php"
      - "dbconnect.php"
      - "wp-config.php"
      - "install.php"
      - "setup.php"
      - "readme.php"
      - "license.php"

    # --- 제외할 경로 (정상적인 파일들) ---
    excluded_paths:
      - "/var/log/nginx/*.log"
      - "/var/log/nginx/*.gz"
      - "/etc/nginx/sites-available/*"
      - "/etc/nginx/sites-enabled/*"
      - "/etc/nginx/conf.d/*.conf"
      - "/etc/nginx/nginx.conf"

    # --- 보고서 관련 ---
    playbook_name: "1_5_2_nginx_unnecessary_files_check.yml"
    result_json_path: "/tmp/security_report_nginx_unnecessary_files.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # 각 디렉터리에서 불필요한 파일 패턴 검색
    - name: 불필요한 파일 패턴 검색
      ansible.builtin.shell: |
        find {{ item }} -type f \( {% for pattern in unnecessary_file_patterns %}-name "{{ pattern }}" {% if not loop.last %}-o {% endif %}{% endfor %} \) 2>/dev/null || true
      loop: "{{ nginx_directories }}"
      register: unnecessary_files_check
      changed_when: false
      failed_when: false

    # 위험한 실행 파일 패턴 검색 (nginx 설정 디렉터리에서만)
    - name: nginx 설정 디렉터리에서 위험한 실행 파일 검색
      ansible.builtin.shell: |
        find /etc/nginx -type f \( {% for pattern in dangerous_file_patterns_nginx_config %}-name "{{ pattern }}" {% if not loop.last %}-o {% endif %}{% endfor %} \) 2>/dev/null || true
      register: dangerous_files_check
      changed_when: false
      failed_when: false

    # 특정 위험한 파일명 직접 검색 (웹 디렉터리에서)
    - name: 알려진 위험 파일명 검색
      ansible.builtin.shell: |
        # 위험한 테스트/정보 노출 파일 검색 (웹 디렉터리에서)
        find /var/www /usr/share/nginx -type f \( \
        {% for file in risky_web_files %}-name "{{ file }}" {% if not loop.last %}-o {% endif %}{% endfor %} \
        \) 2>/dev/null || true
        
        # 기타 위험한 파일들 (모든 nginx 디렉터리에서)
        find {{ nginx_directories | join(' ') }} -type f \( \
        -name ".htaccess*" -o \
        -name ".htpasswd*" -o \
        -name "*.log" ! -path "/var/log/nginx/*" -o \
        -name "error_log" -o \
        -name "access_log" -o \
        -name "*.sql" -o \
        -name "*.db" -o \
        -name "dump.*" -o \
        -name "backup.*" -o \
        -name "*.tar" -o \
        -name "*.zip" -o \
        -name "*.gz" ! -path "/var/log/nginx/*" \
        \) 2>/dev/null || true
      register: known_risky_files_check
      changed_when: false
      failed_when: false

    # 빈 또는 기본 index 파일 검색
    - name: 기본 테스트 페이지 및 빈 파일 검색
      ansible.builtin.shell: |
        # nginx 기본 페이지 검색
        find /var/www -name "index.html" -exec grep -l "Welcome to nginx\|Test Page\|It works\|Apache.*Test" {} \; 2>/dev/null || true
        # 빈 파일 검색
        find {{ nginx_directories | join(' ') }} -type f -size 0 2>/dev/null || true
      register: default_pages_check
      changed_when: false
      failed_when: false

    # 결과 통합 및 취약 파일 목록 생성
    - name: 발견된 불필요한 파일 목록 통합
      ansible.builtin.set_fact:
        all_unnecessary_files: >-
          {{ (unnecessary_files_check.results | map(attribute='stdout_lines') | flatten) +
             (dangerous_files_check.stdout_lines | default([])) +
             (known_risky_files_check.stdout_lines | default([])) +
             (default_pages_check.stdout_lines | default([])) }}

    # 중복 제거 및 필터링
    - name: 불필요한 파일 목록 정리
      ansible.builtin.set_fact:
        vulnerable_files: "{{ all_unnecessary_files | select('string') | list | unique | sort }}"

    # 최종 취약 여부 판단
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ vulnerable_files | length > 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (불필요한 파일 {{ vulnerable_files | length }}개 발견){% else %}양호{% endif %}"

    # 상세 파일 목록 출력 (취약한 경우)
    - name: 발견된 불필요한 파일 목록 출력
      ansible.builtin.debug:
        msg: "발견된 파일들: {{ vulnerable_files }}"
      when: is_vulnerable and vulnerable_files | length > 0

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 불필요한 파일 존재 여부 확인",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "Nginx 관련 디렉터리에서 보안상 위험하거나 불필요한 파일들이 발견되었습니다." if is_vulnerable else "Nginx 관련 디렉터리에서 불필요한 파일이 발견되지 않았습니다.",
                "vulnerable_files_found": vulnerable_files,
                "total_files_count": vulnerable_files | length,
                "checked_directories": nginx_directories,
                "recommendation": "발견된 파일들을 검토하여 불필요한 파일은 삭제하고, 백업 파일은 안전한 위치로 이동하십시오."
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치 (수동 조치 안내)
    # 자동으로 파일을 삭제하지 않고, 사용자에게 필요한 조치를 안내
    - name: 필요한 수동 조치 안내
      ansible.builtin.debug:
        msg:
          - "보안 취약점이 발견되었습니다. 아래 목록의 파일들을 수동으로 점검해야 합니다."
          - "발견된 불필요한 파일 목록:"
          - "{{ vulnerable_files }}"
          - ""
          - "조치 권고사항:"
          - "  [백업/임시 파일]"
          - "    - *.bak, *.old, *.backup, *.tmp 등의 파일은 즉시 삭제하십시오."
          - "    - 명령어 예: sudo find /etc/nginx -name '*.bak' -delete"
          - ""
          - "  [테스트/예제 파일]"
          - "    - test.*, *.test, *.example, *.sample 파일들을 검토 후 삭제하십시오."
          - ""
          - "  [위험한 실행 파일]"
          - "    - nginx 설정 디렉터리(/etc/nginx)에서 발견된 PHP, CGI, 쉘 스크립트는 즉시 제거하십시오."
          - "    - 웹 디렉터리에서는 정상적인 웹사이트 파일과 구분하여 테스트/정보 노출 파일만 삭제하십시오."
          - "    - 특히 phpinfo.php, test.php, config.php, admin.php 등은 정보 노출 위험이 높습니다."
          - ""
          - "  [기본 테스트 페이지]"
          - "    - nginx 기본 Welcome 페이지는 사용자 정의 페이지로 교체하십시오."
          - ""
          - "  [일반적인 조치 명령어]"
          - "    - 파일 삭제: sudo rm -f <파일경로>"
          - "    - 백업 후 삭제: sudo mv <파일경로> /backup/location/ && sudo rm -f <파일경로>"
          - "    - 권한 확인: ls -la <파일경로>"
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록 (자동 조치가 없으므로 '수동 조치 필요'로 기록)
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: false
        remediation_tasks_performed: "{{ ['수동 조치 필요'] if is_vulnerable else [] }}"
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'manual_remediation_commands': [
                'sudo find /etc/nginx -name "*.bak" -o -name "*.old" -o -name "*.tmp" | xargs sudo rm -f',
                'sudo find /etc/nginx -name "*.php" -o -name "*.cgi" -o -name "*.sh" | xargs sudo rm -f',
                'sudo find /var/www -name "phpinfo.php" -o -name "test.php" -o -name "info.php" | xargs sudo rm -f',
                'sudo find /var/www -name "config.php" -o -name "admin.php" -o -name "install.php" | xargs sudo rm -f',
                'sudo find /var/www -name "test.*" -o -name "*.test" | xargs sudo rm -f',
                'sudo find {{ nginx_directories | join(" ") }} -name "*~" -o -name "*.swp" | xargs sudo rm -f'
              ] if is_vulnerable else []
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable