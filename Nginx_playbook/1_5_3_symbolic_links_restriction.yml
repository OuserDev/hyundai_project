---
- name: 진단 및 조치 - Nginx 심볼릭 링크 및 Aliases 사용 제한
  hosts: PostWebServers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 Nginx 설정 파일 목록 ---
    nginx_config_files:
      - "/etc/nginx/nginx.conf"
      - "/etc/nginx/sites-available/*"
      - "/etc/nginx/sites-enabled/*"
      - "/etc/nginx/conf.d/*.conf"

    # --- 점검할 디렉터리 ---
    nginx_config_dirs:
      - "/etc/nginx"
      - "/etc/nginx/sites-available"
      - "/etc/nginx/sites-enabled"
      - "/etc/nginx/conf.d"

    # --- 권장 보안 설정 ---
    required_disable_symlinks: "off"
    nginx_main_config: "/etc/nginx/nginx.conf"
    
    # --- 보고서 관련 ---
    playbook_name: "1_5_3_symbolic_links_restriction.yml"
    result_json_path: "/tmp/security_report_nginx_symlinks_restriction.json"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # Nginx 서비스 실행 여부 확인
    - name: Nginx 서비스 실행 상태 확인
      ansible.builtin.systemd:
        name: nginx
      register: nginx_service_check
      ignore_errors: true

    # Nginx 설정 파일에서 disable_symlinks 설정 확인
    - name: Nginx 설정 파일에서 disable_symlinks 설정 확인
      ansible.builtin.shell: |
        find {{ nginx_config_dirs | join(' ') }} -name "*.conf" -type f -exec grep -l "disable_symlinks" {} \; 2>/dev/null || true
      register: disable_symlinks_files_check
      changed_when: false
      failed_when: false

    # disable_symlinks 설정 내용 상세 확인
    - name: nginx.conf에서 disable_symlinks 설정 확인
      ansible.builtin.shell: |
        grep -n "disable_symlinks" {{ nginx_main_config }} 2>/dev/null || echo "NOT_FOUND"
      register: disable_symlinks_content_check
      changed_when: false
      failed_when: false

    # alias 지시어 사용 확인
    - name: Nginx 설정에서 alias 지시어 사용 확인
      ansible.builtin.shell: |
        find {{ nginx_config_dirs | join(' ') }} -name "*.conf" -type f -exec grep -H "alias" {} \; 2>/dev/null | grep -v "#" || true
      register: alias_usage_check
      changed_when: false
      failed_when: false

    # 진단 결과 분석
    - name: 진단 결과 분석
      ansible.builtin.set_fact:
        # Nginx가 실행 중인지 확인
        is_nginx_running: "{{ nginx_service_check.status.ActiveState == 'active' if 'status' in nginx_service_check else false }}"
        
        # disable_symlinks 설정이 있는지 확인
        has_disable_symlinks: "{{ disable_symlinks_content_check.stdout != 'NOT_FOUND' and disable_symlinks_content_check.stdout != '' }}"
        
        # disable_symlinks off 설정이 되어 있는지 확인
        has_disable_symlinks_off: >-
          {{ disable_symlinks_content_check.stdout | regex_search('disable_symlinks\s+off') is not none }}
        
        # alias 지시어가 사용되고 있는지 확인
        has_alias_usage: "{{ alias_usage_check.stdout_lines | length > 0 }}"

    # 최종 취약 여부 종합 판단
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: >-
          {{ is_nginx_running and not has_disable_symlinks_off }}
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 상세히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          ===== Nginx disable_symlinks 설정 진단 결과 =====
          총괄 결과: {% if is_vulnerable %}취약{% else %}양호{% endif %}
          
          [서비스 상태]
          - Nginx 실행 상태: {{ 'Running' if is_nginx_running else 'Stopped' }}
          
          [disable_symlinks 설정]
          - disable_symlinks 설정 존재: {{ 'YES' if has_disable_symlinks else 'NO' }}
          - disable_symlinks off 설정: {{ 'YES' if has_disable_symlinks_off else 'NO' }}
          
          [현재 설정 내용]
          - {{ disable_symlinks_content_check.stdout if disable_symlinks_content_check.stdout != 'NOT_FOUND' else '설정 없음' }}

    # 상세 결과 출력
    - name: alias 사용 현황 출력
      ansible.builtin.debug:
        msg: "Alias 사용 현황: {{ alias_usage_check.stdout_lines }}"
      when: has_alias_usage

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 심볼릭 링크 및 Aliases 사용 제한",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "nginx.conf 파일에 'disable_symlinks off' 설정이 없습니다." if is_vulnerable else "nginx.conf에 disable_symlinks off 설정이 적절히 구성되어 있습니다.",
                "nginx_running": is_nginx_running,
                "disable_symlinks_configured": has_disable_symlinks,
                "disable_symlinks_off_set": has_disable_symlinks_off,
                "alias_usage_detected": has_alias_usage,
                "current_config": disable_symlinks_content_check.stdout,
                "alias_usage_details": alias_usage_check.stdout_lines
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # nginx.conf에 disable_symlinks off 설정 추가
    - name: nginx.conf에 disable_symlinks off 설정 추가
      ansible.builtin.lineinfile:
        path: "{{ nginx_main_config }}"
        insertafter: '^\s*http\s*{'
        line: '    disable_symlinks off;'
        backup: yes
        state: present
      register: nginx_config_change
      when: is_vulnerable

    # nginx 설정 문법 검사
    - name: nginx 설정 문법 검사
      ansible.builtin.command: nginx -t
      register: nginx_syntax_check
      when: nginx_config_change.changed
      failed_when: nginx_syntax_check.rc != 0

    # nginx 서비스 재시작 (설정이 변경된 경우에만)
    - name: nginx 서비스 reload
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
      register: nginx_reload
      when: nginx_config_change.changed and nginx_syntax_check.rc == 0

    # 조치 후 설정 재확인
    - name: 조치 후 disable_symlinks 설정 재확인
      ansible.builtin.shell: |
        grep -n "disable_symlinks" {{ nginx_main_config }} 2>/dev/null || echo "NOT_FOUND"
      register: post_remediation_check
      when: nginx_config_change.changed
      changed_when: false
      failed_when: false

    # 5. 조치 결과 보고
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ nginx_config_change.changed | default(false) }}"
        remediation_tasks_performed: >-
          {{ (['nginx.conf 설정 추가'] if nginx_config_change.changed | default(false) else []) +
             (['nginx 서비스 reload'] if nginx_reload.changed | default(false) else []) }}
      when: is_vulnerable

    # 조치 결과 콘솔 출력
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          ===== 조치 결과 =====
          설정 변경: {{ 'YES' if nginx_config_change.changed | default(false) else 'NO' }}
          문법 검사: {{ 'PASS' if nginx_syntax_check.rc == 0 else 'FAIL' if nginx_syntax_check is defined else 'SKIP' }}
          서비스 reload: {{ 'YES' if nginx_reload.changed | default(false) else 'NO' }}
          
          {% if post_remediation_check is defined and post_remediation_check.stdout != 'NOT_FOUND' %}
          조치 후 설정: {{ post_remediation_check.stdout }}
          {% endif %}
      when: not ansible_check_mode and is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'applied_config': {
                'setting_added': 'disable_symlinks off;',
                'config_file': nginx_main_config,
                'syntax_check_passed': nginx_syntax_check.rc == 0 if nginx_syntax_check is defined else false,
                'service_reloaded': nginx_reload.changed | default(false)
              } if (remediation_done | default(false)) else {}
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode