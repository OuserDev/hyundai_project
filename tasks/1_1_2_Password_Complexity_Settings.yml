---
- name: 진단 및 조치 - 패스워드 복잡도 설정
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 설정 목표 --- 최소길이 : 8자, 소문자 1개 이상, 숫자 1개이상 , 최소 클래스 2개이상
    min_length: 8
    lower_credit: -1
    digit_credit: -1
    min_classes: 2
    enforce_for_root: "enforce_for_root" # root 계정에도 정책 강제

    # --- OS 계열별 설정 파일 및 패키지 ---
    pam_config_file_debian: "/etc/pam.d/common-password"
    pwquality_config_file_rhel: "/etc/securitypwquality.conf"
    package_name_debian: "libpam-pwquality"
    package_name_rhel: "libpwquality"

    # --- 보고서 관련 ---
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # OS 계열에 따라 사용할 설정 파일과 패키지 이름 결정
    - name: OS 계열별 변수 설정
      ansible.builtin.set_fact:
        pam_config_file: "{{ pwquality_config_file_rhel if ansible_facts['os_family'] == 'RedHat' else pam_config_file_debian }}"
        package_name: "{{ package_name_rhel if ansible_facts['os_family'] == 'RedHat' else package_name_debian }}"

    # [수정됨] 옵션 순서에 상관없이 각 설정을 개별적으로 확인하는 진단 스크립트
    - name: 현재 패스워드 복잡도 설정 진단
      ansible.builtin.shell: |
        set -o pipefail
        # Debian/Ubuntu 계열 진단
        if [[ "{{ ansible_facts['os_family'] }}" == "Debian" ]]; then
          grep "pam_pwquality.so" {{ pam_config_file_debian }} | grep -q "minlen={{ min_length }}" && \
          grep "pam_pwquality.so" {{ pam_config_file_debian }} | grep -q "lcredit={{ lower_credit }}" && \
          grep "pam_pwquality.so" {{ pam_config_file_debian }} | grep -q "dcredit={{ digit_credit }}" && \
          grep "pam_pwquality.so" {{ pam_config_file_debian }} | grep -q "minclass={{ min_classes }}" && \
          grep "pam_pwquality.so" {{ pam_config_file_debian }} | grep -q "{{ enforce_for_root }}"
          exit $?
        fi
        # RedHat/CentOS 계열 진단
        if [[ "{{ ansible_facts['os_family'] }}" == "RedHat" ]]; then
          grep -q "^minlen = {{ min_length }}" {{ pwquality_config_file_rhel }} && \
          grep -q "^lcredit = {{ lower_credit }}" {{ pwquality_config_file_rhel }} && \
          grep -q "^dcredit = {{ digit_credit }}" {{ pwquality_config_file_rhel }} && \
          grep -q "^minclass = {{ min_classes }}" {{ pwquality_config_file_rhel }} && \
          grep -q "^{{ enforce_for_root }}" {{ pwquality_config_file_rhel }}
          exit $?
        fi
        exit 1 # 어느 경우도 아니면 '취약'으로 판단
      args:
        executable: /bin/bash
      register: password_policy_check
      changed_when: false
      failed_when: false # rc=1은 '설정이 다름'을 의미하므로 실패가 아님

    # 진단 결과 종합 판단
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ password_policy_check.rc != 0 }}"

    # 3. 진단 결과 보고
    # ... (이하 모든 보고 및 조치 로직은 이전과 동일하게 작동합니다)
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (조치 필요){% else %}양호{% endif %}"

    - name: JSON 보고서 초기 데이터 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "1.1.2_password_complexity.yml"
          task_description: "패스워드 복잡도 설정"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details:
            reason: "{% if is_vulnerable %}패스워드 복잡도 설정이 보안 기준을 충족하지 않습니다.{% else %}패스워드 복잡도 설정이 양호합니다.{% endif %}"
            recommendation: "minlen={{min_length}}, lcredit={{lower_credit}}, dcredit={{digit_credit}}, minclass={{min_classes}}, {{enforce_for_root}} 설정 적용"

    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: 패스워드 품질 관리 패키지 설치
      ansible.builtin.package:
        name: "{{ package_name }}"
        state: present
      register: package_install
      when: is_vulnerable

    - name: PAM 설정 적용 (Debian/Ubuntu)
      ansible.builtin.lineinfile:
        path: "{{ pam_config_file_debian }}"
        regexp: '^password\s+(requisite|required)\s+pam_pwquality\.so.*'
        line: "password    requisite     pam_pwquality.so retry=3 minlen={{ min_length }} lcredit={{ lower_credit }} dcredit={{ digit_credit }} minclass={{ min_classes }} {{ enforce_for_root }}"
        state: present
        backup: yes
      register: pam_config_change_debian
      when:
        - is_vulnerable
        - ansible_facts['os_family'] == "Debian"

    - name: pwquality.conf 설정 적용 (RedHat/CentOS)
      ansible.builtin.lineinfile:
        path: "{{ pwquality_config_file_rhel }}"
        regexp: "^{{ item.key }}"
        line: "{{ item.key }} = {{ item.value }}"
        state: present
        backup: yes
        create: yes
        mode: '0644'
      loop:
        - { key: 'minlen', value: '{{ min_length }}' }
        - { key: 'lcredit', value: '{{ lower_credit }}' }
        - { key: 'dcredit', value: '{{ digit_credit }}' }
        - { key: 'minclass', value: '{{ min_classes }}' }
      register: pam_config_change_rhel_parts
      when:
        - is_vulnerable
        - ansible_facts['os_family'] == "RedHat"
    
    - name: pwquality.conf enforce_for_root 설정 적용 (RedHat/CentOS)
      ansible.builtin.lineinfile:
        path: "{{ pwquality_config_file_rhel }}"
        regexp: "^{{ enforce_for_root }}"
        line: "{{ enforce_for_root }}"
        state: present
        backup: yes
      register: pam_config_change_rhel_root
      when:
        - is_vulnerable
        - ansible_facts['os_family'] == "RedHat"

    # 5. 조치 결과 보고
    - name: 조치 내용 종합
      ansible.builtin.set_fact:
        remediation_done: "{{ package_install.changed or pam_config_change_debian.changed or (pam_config_change_rhel_parts is defined and pam_config_change_rhel_parts.changed) or (pam_config_change_rhel_root is defined and pam_config_change_rhel_root.changed) }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료{% elif not is_vulnerable %}조치 불필요 (양호){% else %}조치 실패{% endif %}"
      when: not ansible_check_mode

    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ current_report_data | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
            'remediation_timestamp': ansible_date_time.iso8601,
            'remediation_tasks_performed': (['패키지 설치'] if package_install.changed else []) + (['PAM 설정 변경'] if (pam_config_change_debian.changed or (pam_config_change_rhel_parts is defined and pam_config_change_rhel_parts.changed) or (pam_config_change_rhel_root is defined and pam_config_change_rhel_root.changed)) else [])
          }, recursive=True) }}"
      when: not ansible_check_mode and is_vulnerable

    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      when: not ansible_check_mode and is_vulnerable
      delegate_to: localhost
      become: false