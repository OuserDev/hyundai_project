---
- name: 진단 및 조치 - OS 방화벽 기능 활성화
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "1_2_9_firewall_enable.yml"
    remediation_tasks_performed: []
    manual_remediation_guide: "OS에 맞는 방화벽을 활성화하십시오. (예: sudo ufw allow ssh && sudo ufw --force enable 또는 sudo systemctl enable --now firewalld)"

  tasks:
    # 2. 진단
    # [최종 수정] ufw status의 결과를 직접 확인하는 가장 안정적인 방식으로 변경
    - name: 방화벽 활성화 상태 진단
      ansible.builtin.shell: |
        if [ "{{ ansible_facts['os_family'] }}" = "Debian" ]; then
          LC_ALL=C ufw status | grep -q 'Status: active'
        elif [ "{{ ansible_facts['os_family'] }}" = "RedHat" ]; then
          systemctl is-active firewalld | grep -q 'active'
        else
          exit 1
        fi
      register: firewall_check
      changed_when: false
      failed_when: false # rc=1 (inactive)은 오류가 아님

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        # grep 명령어의 리턴 코드가 0이면(active 상태를 찾으면) '양호'
        is_vulnerable: "{{ firewall_check.rc != 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (방화벽이 비활성화되어 있습니다){% else %}양호{% endif %}"

    # ... (이하 보고 및 조치, 최종 보고 섹션은 이전과 동일하게 작동합니다)
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "OS 방화벽 기능 활성화",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "호스트 기반 방화벽(UFW 또는 firewalld)이 활성화되어 있지 않습니다." if is_vulnerable else "호스트 기반 방화벽이 활성화되어 있습니다."
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: 방화벽 조치 블록
      block:
        - name: SSH 접속 허용 규칙 추가 (UFW)
          ansible.builtin.command: ufw allow ssh
          register: r_ufw_allow
          changed_when: "'added' in r_ufw_allow.stdout"
          when: ansible_facts['os_family'] == "Debian"

        - name: 방화벽 활성화 (UFW)
          ansible.builtin.command: ufw --force enable
          register: r_ufw_enable
          changed_when: "'Firewall is active' in r_ufw_enable.stdout"
          when: ansible_facts['os_family'] == "Debian"

        - name: 방화벽 서비스 시작 (firewalld)
          ansible.builtin.systemd:
            name: firewalld
            state: started
            enabled: yes
          register: r_firewalld
          when: ansible_facts['os_family'] == "RedHat"

        - name: SSH 접속 허용 규칙 추가 (firewalld)
          ansible.builtin.command: firewall-cmd --permanent --add-service=ssh
          register: r_firewalld_rule
          changed_when: "'success' in r_firewalld_rule.stdout"
          when: ansible_facts['os_family'] == "RedHat"

        - name: 방화벽 규칙 재적용 (firewalld)
          ansible.builtin.command: firewall-cmd --reload
          when: r_firewalld_rule.changed

      when: is_vulnerable

    # 5. 조치 결과 보고
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: >-
          {{ (r_ufw_allow.changed | default(false)) or
             (r_ufw_enable.changed | default(false)) or
             (r_firewalld.changed | default(false)) or
             (r_firewalld_rule.changed | default(false)) }}
        remediation_tasks_performed: >-
          {{ (['UFW SSH 허용'] if r_ufw_allow.changed | default(false) else []) +
             (['UFW 활성화'] if r_ufw_enable.changed | default(false) else []) +
             (['firewalld 활성화'] if r_firewalld.changed | default(false) else []) +
             (['firewalld SSH 허용'] if r_firewalld_rule.changed | default(false) else []) }}
      when: is_vulnerable
    
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}
      when: not ansible_check_mode

    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패 (수동 조치 필요)'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode