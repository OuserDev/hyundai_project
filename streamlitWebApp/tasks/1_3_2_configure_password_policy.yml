- name: MySQL 취약한 패스워드 정책 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: no

  # 1. 변수 정의
  vars:
    playbook_name: "mysql_weak_password_policy.yml"
    manual_remediation_guide: "MySQL 설정 파일(my.cnf)에서 validate_password 관련 설정을 직접 수정하거나, 'SET GLOBAL' 명령어로 정책을 설정하십시오."
    # 패스워드 복잡도 정책 목표값
    password_policy_settings:
      validate_password.length: 8
      validate_password.mixed_case_count: 1
      validate_password.number_count: 1
      validate_password.special_char_count: 1

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (MySQL 설치 여부)
    # ----------------------------------------------------------------
    - name: MySQL 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which mysql
      register: mysql_installed
      changed_when: false
      failed_when: false

    - name: MySQL 미설치 시 작업 종료
      when: mysql_installed.rc != 0
      block:
        - name: MySQL 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "MySQL이 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: validate_password 컴포넌트 설치 여부 진단
      ansible.builtin.shell: "mysql -NBe \"SELECT component_urn FROM mysql.component WHERE component_urn LIKE '%validate_password%';\" | grep 'validate_password'"
      register: component_check
      changed_when: false
      failed_when: false

    - name: 패스워드 정책 설정값 진단
      ansible.builtin.shell: |
        SETTINGS=$(mysql -NBe "SHOW VARIABLES LIKE 'validate_password%';")
        # 정책 중 하나라도 기준에 미달하면 취약(rc=1)
        if ! echo "$SETTINGS" | grep -Eq "^validate_password.length\s+([8-9]|[1-9][0-9]+)$"; then exit 1; fi
        if ! echo "$SETTINGS" | grep -Eq "^validate_password.mixed_case_count\s+([1-9][0-9]*)$"; then exit 1; fi
        if ! echo "$SETTINGS" | grep -Eq "^validate_password.number_count\s+([1-9][0-9]*)$"; then exit 1; fi
        if ! echo "$SETTINGS" | grep -Eq "^validate_password.special_char_count\s+([1-9][0-9]*)$"; then exit 1; fi
        exit 0 # 모든 정책 만족 시 양호(rc=0)
      register: policy_check
      when: component_check.rc == 0 # 컴포넌트가 설치된 경우에만 실행
      changed_when: false
      failed_when: false

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ component_check.rc != 0 or policy_check.rc != 0 }}"
        vulnerability_reason: >-
          {% if component_check.rc != 0 %}
          패스워드 검증 컴포넌트(validate_password)가 설치되어 있지 않습니다.
          {% elif policy_check.rc != 0 %}
          패스워드 복잡도 정책이 기준에 미달합니다.
          {% else %}
          패스워드 정책이 양호합니다.
          {% endif %}
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 ({{ vulnerability_reason }}){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "MySQL 취약한 패스워드 정책 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": vulnerability_reason
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: validate_password 컴포넌트 설치
          community.mysql.mysql_query:
            query: "INSTALL COMPONENT 'file://component_validate_password';"
          when: component_check.rc != 0
          register: r_component_install

        - name: 패스워드 복잡도 정책 설정
          community.mysql.mysql_query:
            query: "SET GLOBAL {{ item.key }} = {{ item.value }};"
          loop: "{{ password_policy_settings | dict2items }}"
          register: r_policy_set

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ (r_component_install is defined and r_component_install.changed) or (r_policy_set is defined and r_policy_set.changed) }}"
        remediation_tasks_performed: "{{ (['validate_password 컴포넌트 설치'] if r_component_install is defined and r_component_install.changed else []) + (['패스워드 정책 설정'] if r_policy_set is defined and r_policy_set.changed else []) }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no