- name: Nginx client_max_body_size 설정 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: no

  # 1. 변수 정의
  vars:
    playbook_name: "nginx_client_max_body_size.yml"
    manual_remediation_guide: "Nginx 설정 파일(nginx.conf)의 http 블록에 'client_max_body_size 10m;'과 같이 업로드 크기 제한 설정을 추가하십시오. (10M은 예시이며, 서비스 환경에 맞게 조절)"
    nginx_main_config: "/etc/nginx/nginx.conf"
    remediation_value: "10m"

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Nginx 설치 여부)
    # ----------------------------------------------------------------
    - name: Nginx 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which nginx
      register: nginx_installed
      changed_when: false
      failed_when: false

    - name: Nginx 미설치 시 작업 종료
      when: nginx_installed.rc != 0
      block:
        - name: Nginx 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "Nginx가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: nginx.conf 파일에 client_max_body_size 설정 여부 진단
      ansible.builtin.shell: "grep -q -E '^\\s*client_max_body_size\\s+' {{ nginx_main_config }}"
      register: size_limit_check
      changed_when: false
      failed_when: false # grep이 못찾아도(rc=1) 오류가 아님

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ size_limit_check.rc != 0 }}" # 설정이 없으면(rc=1) 취약
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (nginx.conf에 client_max_body_size 설정이 없습니다){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 파일 업로드 크기 제한(client_max_body_size) 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "DoS 공격 방지를 위한 client_max_body_size 설정이 nginx.conf에 없습니다." if is_vulnerable else "nginx.conf에 client_max_body_size 설정이 존재합니다.",
                "checked_file": nginx_main_config
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: nginx.conf 파일에 'client_max_body_size' 설정 추가
          ansible.builtin.lineinfile:
            path: "{{ nginx_main_config }}"
            regexp: '^(\s*#\s*)?client_max_body_size\s+.*'
            line: '    client_max_body_size {{ remediation_value }};'
            insertafter: '^\s*http\s*{'
            backup: yes
          register: r_config_change
          notify: Reload nginx service

        - name: 핸들러 즉시 실행
          ansible.builtin.meta: flush_handlers

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ r_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['nginx.conf에 `client_max_body_size` 추가 및 서비스 재시작'] if r_config_change.changed | default(false) else [] }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

  # ----------------------------------------------------------------
  # 핸들러: 조치 시 문법 검사 및 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Reload nginx service
      block:
        - name: Nginx 설정 파일 문법 검사
          ansible.builtin.command: nginx -t
          changed_when: false

        - name: Nginx 서비스 재시작
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
            