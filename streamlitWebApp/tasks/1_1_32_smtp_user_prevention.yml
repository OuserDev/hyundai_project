---
- name: 진단 및 조치 - 일반 사용자의 Sendmail 실행 방지
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    sendmail_config: "/etc/mail/sendmail.cf"
    postfix_binary: "/usr/sbin/postfix"
    required_postfix_mode: "0750"
    postfix_privileged_group_rhel: "postfix"
    postfix_privileged_group_debian: "postdrop"
    playbook_name: "1_1_32_smtp_user_prevention.yml"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    - name: OS 계열별 Postfix 그룹 이름 설정
      ansible.builtin.set_fact:
        postfix_privileged_group: "{{ postfix_privileged_group_rhel if ansible_facts['os_family'] == 'RedHat' else postfix_privileged_group_debian }}"

    # 실행 중인 메일 서버 확인
    - name: 실행 중인 메일 서버 확인
      ansible.builtin.shell: "ps -ef | grep -E '[s]endmail|[p]ostfix/master'"
      register: mail_process_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    # 진단에 필요한 정보 수집
    - name: 진단 정보 수집
      block:
        - name: Sendmail 설정(restrictqrun) 확인
          ansible.builtin.shell: "grep -qE '^O\\s+PrivacyOptions=.*restrictqrun' {{ sendmail_config }}"
          register: sendmail_config_check
          when: "'sendmail' in mail_process_check.stdout"
        - name: Postfix 바이너리 권한 확인
          ansible.builtin.stat:
            path: "{{ postfix_binary }}"
          register: postfix_binary_stat
          when: "'postfix' in mail_process_check.stdout"
        - name: Postfix 그룹 멤버 확인
          ansible.builtin.getent:
            database: group
            key: "{{ postfix_privileged_group }}"
          register: postfix_group_info
          when: "'postfix' in mail_process_check.stdout"
      ignore_errors: true

    # 1단계: 실행 중인 메일 서버 종류 판단
    - name: 실행 중인 메일 서버 종류 판단
      ansible.builtin.set_fact:
        is_sendmail_running: "{{ 'sendmail' in mail_process_check.stdout }}"
        is_postfix_running: "{{ 'postfix' in mail_process_check.stdout }}"

    # 2단계: 각 서비스별 상세 취약점 진단
    - name: 개별 취약점 여부 판단
      ansible.builtin.set_fact:
        is_sendmail_running: "{{ 'sendmail' in mail_process_check.stdout }}"
        is_postfix_running: "{{ 'postfix' in mail_process_check.stdout }}"
        is_sendmail_vuln: "{{ is_sendmail_running and (sendmail_config_check.rc != 0 if sendmail_config_check is defined else true) }}"
        is_postfix_perm_vuln: "{{ is_postfix_running and (postfix_binary_stat.stat.mode | int(base=8) > required_postfix_mode | int(base=8) if postfix_binary_stat.stat is defined else false) }}"
        # [수정] 동적 변수를 사용하여 getent 결과 참조
        postfix_group_members: "{{ postfix_group_info.ansible_facts.getent_group[postfix_privileged_group][3] | default([]) if postfix_group_info.ansible_facts.getent_group is defined else [] }}"
        is_postfix_group_vuln: "{{ is_postfix_running and (postfix_group_members | difference(['root', 'postfix']) | length > 0) }}"

    # 3단계: 모든 결과를 종합하여 최종 취약 여부 판단
    - name: 최종 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ is_sendmail_vuln or is_postfix_perm_vuln or is_postfix_group_vuln }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약{% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성
    - name: 초기 JSON 보고서 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "{{ playbook_name }}"
          task_description: "일반 사용자의 Sendmail 실행 방지"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ report_timestamp }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details: # [수정] 모든 Jinja2 변수/조건문을 "{{ ... }}"로 감쌉니다.
            reason: "{{ 'Sendmail/Postfix의 일반 사용자 실행 권한에 문제가 있습니다.' if is_vulnerable else '일반 사용자의 메일 서버 실행 권한이 안전하게 설정되어 있습니다.' }}"
            details:
              sendmail_restrictqrun_missing: "{{ is_sendmail_vuln }}"
              postfix_permission_issue: "{{ is_postfix_perm_vuln }}"
              postfix_group_issue: "{{ is_postfix_group_vuln }}"
              postfix_group_current_members: "{{ postfix_group_members }}"
          remediation_tasks_performed: []

    # 초기 JSON 보고서 파일로 저장
    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # 각 취약점에 대해 조치 수행
    - name: 메일 서버 보안 조치 블록
      block:
        - name: Sendmail | restrictqrun 옵션 추가
          ansible.builtin.lineinfile:
            path: "{{ sendmail_config }}"
            regexp: '^(O\s+PrivacyOptions=)(.*)$'
            line: '\1\2,restrictqrun'
            backrefs: yes
            backup: yes
          register: r_sendmail
          when: is_sendmail_vuln

        - name: Postfix | 바이너리 권한 설정
          ansible.builtin.file:
            path: "{{ postfix_binary }}"
            owner: root
            group: root
            mode: "{{ required_postfix_mode }}"
          register: r_postfix_perm
          when: is_postfix_perm_vuln
        
        - name: Postfix | 그룹에 root 사용자 추가
          ansible.builtin.user:
            name: root
            groups: "{{ postfix_privileged_group }}"
            append: yes
          register: r_postfix_group_add
          when: is_postfix_group_vuln

        - name: Postfix | 그룹에서 일반 사용자 제거
          ansible.builtin.user:
            name: "{{ item }}"
            state: absent
            groups: "{{ postfix_privileged_group }}"
          loop: "{{ postfix_group_members | difference(['root', 'postfix']) }}"
          register: r_postfix_group_remove
          when: is_postfix_group_vuln

      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: >-
          {{ (r_sendmail.changed | default(false)) or
             (r_postfix_perm.changed | default(false)) or
             (r_postfix_group_add.changed | default(false)) or
             (r_postfix_group_remove.changed | default(false)) }}
        remediation_tasks_performed: >-
          {{ (['Sendmail restrictqrun 추가'] if r_sendmail.changed | default(false) else []) +
             (['Postfix 바이너리 권한 변경'] if r_postfix_perm.changed | default(false) else []) +
             (['Postfix 그룹 멤버 정리'] if (r_postfix_group_add.changed | default(false) or r_postfix_group_remove.changed | default(false)) else []) }}
      when: is_vulnerable

    # 조치 결과를 콘솔에 출력
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료{% elif not is_vulnerable %}조치 불필요 (양호){% else %}조치 실패{% endif %}"
      when: not ansible_check_mode

    # 최종 JSON 보고서에 조치 결과 추가
    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
            'remediation_timestamp': report_timestamp,
            'remediation_tasks_performed': remediation_tasks_performed | default([])
          }, recursive=True) }}"
      when: not ansible_check_mode and is_vulnerable

    # 최종 JSON 보고서 파일 덮어쓰기
    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable