---
- name: 진단 및 조치 - .rhosts 및 hosts.equiv 파일 관리
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 설정 목표 ---
    required_mode: "0600"

    # --- 보고서 관련 ---
    playbook_name: "1_1_17_rhosts_hostsequiv_check.yml"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # 일반 사용자 목록(UID 1000 이상) 가져오기
    - name: 일반 사용자 목록 가져오기
      ansible.builtin.getent:
        database: passwd
      register: all_users_info

    # 일반 사용자 정보 필터링 (홈 디렉터리 포함)
    - name: 일반 사용자 정보 필터링
      ansible.builtin.set_fact:
        regular_users: "{{ result_string | from_yaml }}"
      vars:
        result_string: |
          {% set users = [] %}
          {% for username, data in (all_users_info.ansible_facts.getent_passwd | default({})).items() %}
            {% if data[1] | int >= 1000 and data[5] is not in ['/usr/sbin/nologin', '/bin/false'] %}
              {% set _ = users.append({'name': username, 'home': data[4]}) %}
            {% endif %}
          {% endfor %}
          {{ users }}

    # 점검 대상 파일 목록 생성
    - name: 점검 대상 파일 목록 생성
      ansible.builtin.set_fact:
        files_to_check: "{{ ['/etc/hosts.equiv'] + (regular_users | map(attribute='home') | map('regex_replace', '^(.*)$', '\\1/.rhosts') | list) }}"

    # 각 파일의 상태(소유자, 권한 등) 확인
    - name: 대상 파일들의 현재 상태 확인
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ files_to_check }}"
      register: file_status_list

    # 각 파일의 내용에 '+' 문자가 있는지 확인
    - name: 대상 파일들의 내용(+ wildcard) 확인
      ansible.builtin.shell: "grep -qE '^\\s*\\+\\s*' {{ item }} || exit 0"
      loop: "{{ files_to_check }}"
      register: file_content_check
      changed_when: false
      failed_when: false
      when: item in (file_status_list.results | selectattr('stat.exists', 'equalto', true) | map(attribute='item') | list)

    # 취약한 파일 목록 생성
    - name: 취약 파일 목록 생성
      ansible.builtin.set_fact:
        vulnerable_files: >-
          {%- set v_files = [] -%}
          {%- for item in file_status_list.results -%}
            {%- if item.stat.exists -%}
              {%- set owner_name = item.item | dirname | basename -%}
              {%- set is_owner_vuln = (item.item == '/etc/hosts.equiv' and item.stat.pw_name != 'root') or
                                     (item.item != '/etc/hosts.equiv' and item.stat.pw_name != owner_name and item.stat.pw_name != 'root') -%}
              {%- set is_perm_vuln = (item.stat.mode | int(base=8)) > (required_mode | int(base=8)) -%}
              {%- set content_check_item = (file_content_check.results | selectattr('item', 'equalto', item.item) | first | default({'rc': 1})) -%}
              {%- set has_plus_vuln = (content_check_item.rc == 0) -%}
              {%- if is_owner_vuln or is_perm_vuln or has_plus_vuln -%}
                {%- set _ = v_files.append({'path': item.item, 'owner': item.stat.pw_name, 'mode': item.stat.mode, 'has_plus': has_plus_vuln}) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{ v_files }}

    # 최종 취약 여부 판단
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ vulnerable_files | length > 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (취약 파일 {{ vulnerable_files | length }}개 발견){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": ".rhosts 및 hosts.equiv 파일 관리",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "일부 .rhosts 또는 hosts.equiv 파일의 소유자/권한 또는 내용에 보안 문제가 있습니다." if is_vulnerable else "모든 .rhosts 및 hosts.equiv 파일이 양호합니다.",
                "vulnerable_files_found": vulnerable_files
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # 취약점으로 진단된 파일들에 대해 소유자, 권한, 내용 조치
    - name: 취약한 파일 조치 블록
      block:
        - name: 파일 소유자 및 권한 조치
          ansible.builtin.file:
            path: "{{ item.path }}"
            owner: "{{ 'root' if item.path == '/etc/hosts.equiv' else (item.path | dirname | basename) }}"
            group: "{{ 'root' if item.path == '/etc/hosts.equiv' else (item.path | dirname | basename) }}"
            mode: "{{ required_mode }}"
          loop: "{{ vulnerable_files }}"
          register: file_perm_remediation

        - name: 파일 내용('+') 조치
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regexp: '^\s*\+\s*'
            state: absent
            backup: yes
          loop: "{{ vulnerable_files | selectattr('has_plus', 'equalto', true) | map(attribute='path') | list }}"
          register: file_content_remediation
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ (file_perm_remediation.changed | default(false)) or (file_content_remediation.changed | default(false)) }}"
        remediation_tasks_performed: >-
          {{ (['소유자/권한 변경'] if file_perm_remediation.changed | default(false) else []) +
             (['+ 라인 제거'] if file_content_remediation.changed | default(false) else []) }}
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      when: not ansible_check_mode and is_vulnerable
      delegate_to: localhost
      become: false