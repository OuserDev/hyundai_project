- name: Apache 심볼릭 링크 및 Aliases 사용 제한 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "apache_symlinks_restriction.yml"
    # OS별 Apache 설정 정의
    apache_bin: "{{ 'httpd' if ansible_facts['os_family'] == 'RedHat' else 'apache2' }}"
    apache_config_dir: "{{ '/etc/httpd' if ansible_facts['os_family'] == 'RedHat' else '/etc/apache2' }}"
    apache_service_name: "{{ 'httpd' if ansible_facts['os_family'] == 'RedHat' else 'apache2' }}"
    manual_remediation_guide: "Apache 설정 파일에서 디렉터리 리스팅을 허용하는 'Options' 지시어의 'Indexes' 옵션을 제거하고, 'Alias' 지시어 사용을 재검토하여 'DocumentRoot'로 대체하는 것을 권장합니다."

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Apache 설치 여부)
    # ----------------------------------------------------------------
    - name: Apache 설치 여부 확인 (사전 확인)
      ansible.builtin.command: "which {{ apache_bin }}"
      register: apache_installed
      changed_when: false
      failed_when: false

    - name: Apache 미설치 시 작업 종료
      when: apache_installed.rc != 0
      block:
        - name: Apache 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "Apache가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: 'Options 지시어에 Indexes 포함 여부 진단'
      ansible.builtin.shell: "grep -r -i -E '^[[:space:]]*Options[[:space:]]+.*[[:space:]]+Indexes' {{ apache_config_dir }} 2>/dev/null | grep -v '#'"
      register: indexes_check
      changed_when: false
      failed_when: false

    - name: 'Alias 지시어 사용 여부 진단'
      ansible.builtin.shell: "grep -r -i -E '^[[:space:]]*Alias[[:space:]]+' {{ apache_config_dir }} 2>/dev/null | grep -v '#'"
      register: alias_check
      changed_when: false
      failed_when: false

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ (indexes_check.rc == 0) or (alias_check.rc == 0) }}"
        vulnerable_indexes_configs: "{{ indexes_check.stdout_lines | default([]) }}"
        vulnerable_alias_configs: "{{ alias_check.stdout_lines | default([]) }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (디렉터리 리스팅 또는 Alias 사용 설정 발견){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Apache 심볼릭 링크 및 Aliases 사용 제한 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "디렉터리 리스팅을 허용하는 'Indexes' 옵션 또는 경로 조작에 취약할 수 있는 'Alias' 지시어가 사용되었습니다." if is_vulnerable else "심볼릭 링크, Alias 관련 보안 설정이 양호합니다.",
                "indexes_found": vulnerable_indexes_configs,
                "alias_found": vulnerable_alias_configs
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: 'Options 지시어에서 Indexes 옵션 제거'
          ansible.builtin.replace:
            path: "{{ item.split(':')[0] | trim }}"
            regexp: '(\s*Options\s+.*)(Indexes|(\+|-)?Indexes)(\s+.*)'
            replace: '\1\4'
            backup: yes
          loop: "{{ vulnerable_indexes_configs }}"
          register: r_indexes_change
          when: vulnerable_indexes_configs | length > 0
          notify: Reload apache service

        - name: 'Alias 지시어 주석 처리'
          ansible.builtin.replace:
            path: "{{ item.split(':')[0] | trim }}"
            regexp: '^(\s*Alias\s+.*)$'
            replace: '#\1'
            backup: yes
          loop: "{{ vulnerable_alias_configs }}"
          register: r_alias_change
          when: vulnerable_alias_configs | length > 0
          notify: Reload apache service

        - name: 핸들러 즉시 실행
          ansible.builtin.meta: flush_handlers

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ (r_indexes_change.changed | default(false)) or (r_alias_change.changed | default(false)) }}"
        remediation_tasks_performed: >-
          {{
            (['`Options`에서 `Indexes` 제거'] if (r_indexes_change is defined and r_indexes_change.changed) else []) +
            (['`Alias` 지시어 주석 처리'] if (r_alias_change is defined and r_alias_change.changed) else [])
          }}
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes

  # ----------------------------------------------------------------
  # 핸들러: 조치 시 문법 검사 및 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Reload apache service
      block:
        - name: Apache 설정 파일 문법 검사
          ansible.builtin.command: "{{ apache_bin }}ctl configtest"
          changed_when: false

        - name: Apache 서비스 재시작
          ansible.builtin.systemd:
            name: "{{ apache_service_name }}"
            state: reloaded