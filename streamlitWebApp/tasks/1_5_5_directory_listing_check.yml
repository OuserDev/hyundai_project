- name: Nginx 디렉터리 리스팅 비활성화 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: no

  # 1. 변수 정의
  vars:
    playbook_name: "nginx_directory_listing.yml"
    manual_remediation_guide: "Nginx 설정 파일의 server 또는 location 블록에 'autoindex off;' 설정을 명시적으로 추가하십시오."
    # 진단할 Nginx 설정 경로 리스트
    nginx_config_paths:
      - /etc/nginx/nginx.conf
      - /etc/nginx/conf.d/
      - /etc/nginx/sites-enabled/

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Nginx 설치 여부)
    # ----------------------------------------------------------------
    - name: Nginx 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which nginx
      register: nginx_installed
      changed_when: false
      failed_when: false

    - name: Nginx 미설치 시 작업 종료
      when: nginx_installed.rc != 0
      block:
        - name: Nginx 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "Nginx가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: "'autoindex off'가 설정되지 않은 파일 진단"
      ansible.builtin.shell: "grep -L -r -E '^\\s*autoindex\\s+off\\s*;' {{ nginx_config_paths | join(' ') }} 2>/dev/null | grep -E '\\.conf$|/nginx.conf$'"
      register: autoindex_check
      changed_when: false
      failed_when: false # 매칭되는 파일이 없어도 오류가 아님

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        vulnerable_conf_files: "{{ autoindex_check.stdout_lines | default([]) | unique }}"
        is_vulnerable: "{{ (autoindex_check.stdout_lines | default([]) | length) > 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (autoindex off가 명시되지 않은 파일 {{ vulnerable_conf_files | length }}개 발견){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 디렉터리 리스팅 비활성화 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "일부 Nginx 설정 파일에서 디렉터리 리스팅이 명시적으로 비활성화(autoindex off)되지 않았습니다." if is_vulnerable else "모든 활성 Nginx 설정 파일에 'autoindex off'가 명시되어 있습니다.",
                "vulnerable_config_files": vulnerable_conf_files
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

    # ----------------------------------------------------------------
    # 4. 조치 (직접 실행 방식)
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: 취약한 설정 파일에 'autoindex off' 설정 추가/수정
          ansible.builtin.lineinfile:
            path: "{{ item }}"
            regexp: '^\s*autoindex\s+(on|off)?\s*;'
            line: '    autoindex off;'
            insertafter: 'server_name\s+.*;'
            firstmatch: true
            backup: yes
          loop: "{{ vulnerable_conf_files }}"
          register: r_config_change

        # 핸들러 대신 직접 실행 - 설정이 변경된 경우에만
        - name: Nginx 설정 파일 문법 검사
          ansible.builtin.command: nginx -t
          changed_when: false
          when: r_config_change.changed
          ignore_errors: true

        - name: Nginx 서비스 재시작 (설정이 변경된 경우)
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
          when: r_config_change.changed
          ignore_errors: true

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ r_config_change is defined and r_config_change.changed }}"
        remediation_tasks_performed: "{{ ['Nginx 설정 파일 수정 및 서비스 재시작'] if (r_config_change is defined and r_config_change.changed) else [] }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

  # ----------------------------------------------------------------
  # 핸들러 섹션 제거 - 더 이상 필요없음
  # ----------------------------------------------------------------
  # handlers:
  #   - name: Reload nginx service
  #     block:
  #       - name: Nginx 설정 파일 문법 검사
  #         ansible.builtin.command: nginx -t
  #         changed_when: false
  #
  #       - name: Nginx 서비스 재시작
  #         ansible.builtin.systemd:
  #           name: nginx
  #           state: reloaded