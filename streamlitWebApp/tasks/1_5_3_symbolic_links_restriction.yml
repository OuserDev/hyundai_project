---
- name: Nginx 심볼릭 링크 및 Aliases 사용 제한 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "nginx_symlinks_restriction.yml"
    manual_remediation_guide: "Nginx 설정 파일의 http 블록 내에 'disable_symlinks off;' 설정을 추가하십시오. 또한, 'alias' 지시어는 경로 조작에 취약할 수 있으므로 'root' 지시어로 대체하는 것을 권장합니다."
    nginx_config_dir: "/etc/nginx"
    nginx_main_config: "/etc/nginx/nginx.conf"

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Nginx 설치 여부)
    # ----------------------------------------------------------------
    - name: Nginx 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which nginx
      register: nginx_installed
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: Nginx 미설치 시 작업 종료
      when: nginx_installed.rc != 0
      block:
        - name: Nginx 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "Nginx가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: disable_symlinks off 설정 여부 진단
      ansible.builtin.shell: "grep -r -q -E '^\\s*disable_symlinks\\s+off\\s*;' {{ nginx_config_dir }} || true"
      register: disable_symlinks_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: alias 지시어 사용 여부 진단
      ansible.builtin.shell: "grep -r -E '^\\s*alias\\s+' {{ nginx_config_dir }} 2>/dev/null | grep -v '#' || true"
      register: alias_usage_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ disable_symlinks_check.rc != 0 }}"
        alias_usages: "{{ alias_usage_check.stdout_lines | default([]) | select('match', '.*') | list }}"
        report_timestamp: "{{ ansible_date_time.iso8601 | default('unknown') }}"
      ignore_errors: true

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 ('disable_symlinks off' 설정이 없습니다){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Nginx 심볼릭 링크 및 Aliases 사용 제한 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "심볼릭 링크 관련 보안 설정(disable_symlinks off)이 없습니다." if is_vulnerable else "심볼릭 링크 관련 보안 설정이 양호합니다.",
                "alias_directive_found": alias_usages | length > 0,
                "alias_directive_details": alias_usages
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no
      ignore_errors: true
      failed_when: false

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: nginx.conf 파일 존재 여부 확인
          ansible.builtin.stat:
            path: "{{ nginx_main_config }}"
          register: nginx_config_exists
          ignore_errors: true

        - name: nginx.conf 파일에 disable_symlinks off 설정 추가
          ansible.builtin.lineinfile:
            path: "{{ nginx_main_config }}"
            regexp: '^\s*#?\s*disable_symlinks\s+.*'
            line: '    disable_symlinks off;'
            insertafter: '^\s*http\s*{'
            backup: yes
            create: no
          register: r_config_change
          when: nginx_config_exists.stat.exists | default(false)
          notify: Reload nginx service
          ignore_errors: true

        - name: 수동으로 nginx 서비스 재시작 (핸들러 대신)
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
          when: 
            - r_config_change is defined
            - r_config_change.changed | default(false)
          ignore_errors: true

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ r_config_change is defined and r_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['nginx.conf에 disable_symlinks off 추가 및 서비스 재시작'] if (r_config_change is defined and r_config_change.changed | default(false)) else [] }}"
      when: is_vulnerable
      ignore_errors: true

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no
      ignore_errors: true
      failed_when: false

  # ----------------------------------------------------------------
  # 핸들러: 조치 시 문법 검사 및 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Reload nginx service
      block:
        - name: Nginx 설정 파일 문법 검사
          ansible.builtin.command: nginx -t
          changed_when: false
          ignore_errors: true

        - name: Nginx 서비스 재시작
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
          ignore_errors: true