- name: MySQL 서버 구동 계정 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes # OS별 설정 파일 경로를 위해 fact 수집

  # 1. 변수 정의
  vars:
    playbook_name: "mysql_running_user.yml"
    manual_remediation_guide: "MySQL 설정 파일([mysqld] 섹션)에 'user = mysql' 설정을 추가하고 서비스를 재시작하십시오."
    # OS 계열별 MySQL 설정 파일 경로 정의
    mysql_config_path: "{{ '/etc/my.cnf' if ansible_facts['os_family'] == 'RedHat' else '/etc/mysql/mysql.conf.d/mysqld.cnf' }}"

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (MySQL 설치 여부)
    # ----------------------------------------------------------------
    - name: MySQL 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which mysqld
      register: mysql_installed
      changed_when: false
      failed_when: false

    - name: MySQL 미설치 시 작업 종료
      when: mysql_installed.rc == 1
      block:
        - name: MySQL 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "MySQL이 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: MySQL 프로세스가 'root' 계정으로 실행되는지 진단
      ansible.builtin.shell: "ps -ef | grep '[m]ysqld' | awk '{print $1}' | grep -q '^root$'"
      register: root_user_check
      changed_when: false
      failed_when: false # grep이 root를 못찾아도(rc=1) 오류가 아님

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ root_user_check.rc == 0 }}" # grep이 'root'를 찾으면(rc=0) 취약
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (MySQL이 root 계정으로 실행 중입니다){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "MySQL 서버 구동 계정 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "MySQL(mysqld) 프로세스가 root 계정으로 실행되고 있습니다." if is_vulnerable else "MySQL이 일반 계정(mysql)으로 안전하게 실행되고 있습니다."
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: MySQL 설정 파일에 'user=mysql' 설정 추가/수정
          ansible.builtin.lineinfile:
            path: "{{ mysql_config_path }}"
            regexp: '^(\s*#\s*)?user\s*='
            line: 'user = mysql'
            insertafter: '^\\[mysqld\\]'
            backup: yes
          register: r_config_change
          notify: Restart mysql service

        - name: 핸들러 즉시 실행
          ansible.builtin.meta: flush_handlers

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        # 핸들러가 실행되었는지 여부로 조치 결과를 판단하기는 복잡하므로, 설정 변경 여부로 판단
        remediation_done: "{{ r_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['MySQL 설정 파일 수정 및 서비스 재시작'] if r_config_change.changed | default(false) else [] }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no

  # ----------------------------------------------------------------
  # 핸들러: 조치 시 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Restart mysql service
      ansible.builtin.systemd:
        name: "{{ 'mysqld' if ansible_facts['os_family'] == 'RedHat' else 'mysql' }}"
        state: restarted