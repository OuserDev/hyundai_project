---
- name: 진단 및 조치 - DNS 보안 버전 패치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 ---
    process_name: "named"
    service_name_rhel: "named"
    service_name_debian: "bind9"

    # --- 보고서 관련 ---
    playbook_name: "1_1_33_dns_patch_check.yml"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # OS 계열에 따라 사용할 서비스 이름 결정
    - name: OS 계열별 서비스 이름 설정
      ansible.builtin.set_fact:
        service_name: "{{ service_name_rhel if ansible_facts['os_family'] == 'RedHat' else service_name_debian }}"

    # BIND (named) 프로세스 실행 여부 확인
    - name: named 프로세스 실행 여부 확인
      ansible.builtin.shell: "ps -ef | grep '[{{ process_name[0] }}]{{ process_name[1:] }}'"
      register: process_check
      changed_when: false
      failed_when: false

    # BIND가 실행 중일 경우 버전 정보 수집
    - name: BIND 버전 정보 수집
      ansible.builtin.command: "named -v"
      register: version_check
      changed_when: false
      failed_when: false
      when: process_check.rc == 0

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        # BIND 프로세스가 실행 중이면 '취약'(관리 필요)으로 판단
        is_vulnerable: "{{ process_check.rc == 0 }}"
        bind_version: "{{ version_check.stderr | default('N/A') if version_check is defined else 'N/A' }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (BIND 서비스 실행 중 - 버전: {{ bind_version }}){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "DNS 보안 버전 패치",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "DNS 서비스(BIND)가 실행 중입니다. 최신 보안 패치가 적용되었는지 버전 확인이 필요합니다." if is_vulnerable else "DNS 서비스(BIND)가 실행 중이지 않습니다.",
                "running_service": {
                  "name": "BIND (named)",
                  "is_running": is_vulnerable,
                  "version_info": bind_version
                }
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치 (수동 조치 안내)
    # 자동으로 패치를 적용하지 않고, 사용자에게 필요한 조치를 안내
    - name: 필요한 수동 조치 안내
      ansible.builtin.debug:
        msg:
          - "보안 점검 결과: BIND(named) 서비스가 실행 중입니다."
          - "설치된 버전 정보: {{ bind_version }}"
          - "조치 권고:"
          - "  - 이 DNS 서버가 반드시 필요한지 확인하십시오."
          - "  - 불필요한 서비스라면 'sudo systemctl disable --now {{ service_name }}' 명령어로 중지하십시오."
          - "  - 필요한 서비스라면, OS 패키지 관리자(apt/yum)를 통해 BIND를 최신 버전으로 업데이트하여 보안 패치를 적용하십시오."
          - "    (예: sudo apt-get update && sudo apt-get upgrade {{ service_name }})"
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록 (자동 조치가 없으므로 '수동 조치 필요'로 기록)
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: false
        remediation_tasks_performed: "{{ ['수동 조치 필요'] if is_vulnerable else [] }}"
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode and is_vulnerable