---
- name: 진단 및 조치 - 쉐도우 패스워드 사용 설정
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    passwd_file: "/etc/passwd"
    # 보고서 관련 변수
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # /etc/passwd 파일의 두 번째 필드가 'x'가 아닌 사용자가 있는지 확인
    - name: /etc/passwd 파일 내 패스워드 저장 여부 진단
      ansible.builtin.shell: "awk -F: '$2 != \"x\" && $2 != \"*\" {print $1}' {{ passwd_file }}"
      args:
        executable: /bin/bash
      register: passwd_check
      changed_when: false
      failed_when: false # 출력이 없어도(rc=1) 정상

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        # awk 명령어의 출력(stdout)이 한 줄이라도 있으면 취약
        is_vulnerable: "{{ passwd_check.stdout_lines | length > 0 }}"
        vulnerable_users: "{{ passwd_check.stdout_lines }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          진단결과: {% if is_vulnerable %}취약{% else %}양호{% endif %}
          {% if is_vulnerable %}
            - 다음 사용자들의 패스워드가 /etc/passwd 파일에 저장되어 있습니다: {{ vulnerable_users | join(', ') }}
          {% endif %}

    # 초기 JSON 보고서 데이터 생성
    - name: 초기 JSON 보고서 생성
      ansible.builtin.set_fact:
        current_report_data:
          playbook_name: "1_1_5_shadow_password_check.yml"
          task_description: "쉐도우 패스워드 사용 설정"
          diagnosis_result: "{% if is_vulnerable %}취약{% else %}양호{% endif %}"
          is_vulnerable: "{{ is_vulnerable }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          hostname: "{{ inventory_hostname }}"
          vulnerability_details:
            reason: "{% if is_vulnerable %}일부 사용자의 패스워드 정보가 /etc/passwd 파일에 직접 저장되어 있습니다.{% else %}모든 사용자의 패스워드가 /etc/shadow 파일에 안전하게 저장되어 있습니다.{% endif %}"
            vulnerable_users: "{{ vulnerable_users if is_vulnerable else [] }}"
            recommendation: "pwconv 명령어를 실행하여 모든 계정이 쉐도우 패스워드를 사용하도록 전환해야 합니다."

    # 초기 JSON 보고서 파일로 저장
    - name: 초기 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    # pwconv 명령어를 실행하여 /etc/passwd의 패스워드를 /etc/shadow로 이동
    - name: 쉐도우 패스워드 활성화 (pwconv)
      ansible.builtin.command:
        cmd: pwconv
      register: pwconv_run
      changed_when: true # 이 작업이 실행되면 항상 변경된 것으로 간주
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 조치 내용 종합
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ pwconv_run.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['pwconv 실행'] if pwconv_run.changed | default(false) else [] }}"
      when: is_vulnerable

    # 조치 결과를 콘솔에 출력
    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료{% elif not is_vulnerable %}조치 불필요 (양호){% else %}조치 실패{% endif %}"
      when: not ansible_check_mode

    # JSON 보고서에 조치 결과 추가
    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
            'remediation_timestamp': ansible_date_time.iso8601,
            'remediation_tasks_performed': remediation_tasks_performed | default([])
          }, recursive=True) }}"
      when: not ansible_check_mode and is_vulnerable

    # 최종 JSON 보고서 파일 덮어쓰기
    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      when: not ansible_check_mode and is_vulnerable
      delegate_to: localhost
      become: false