- name: PHP 주요 함수 비활성화(disable_functions) 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "php_disable_functions.yml"
    manual_remediation_guide: "php.ini 설정 파일의 'disable_functions' 지시어에 exec, system 등과 같이 시스템 명령어를 실행할 수 있는 위험 함수를 추가하여 비활성화하고, 웹 서버 또는 PHP-FPM 서비스를 재시작하십시오."
    # 비활성화를 권장하는 필수 함수 목록
    required_disabled_functions:
      - exec
      - passthru
      - shell_exec
      - system
      - proc_open
      - popen

  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (PHP 설치 여부)
    # ----------------------------------------------------------------
    - name: PHP 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which php
      register: php_installed
      changed_when: false
      failed_when: false

    - name: PHP 미설치 시 작업 종료
      when: php_installed.rc != 0
      block:
        - name: PHP 미설치 메시지 출력
          ansible.builtin.debug:
            msg: "PHP가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          ansible.builtin.meta: end_play

    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------
    - name: php.ini 파일 목록 조회
      ansible.builtin.shell: "find /etc/php* -type f -name 'php.ini'"
      register: php_ini_files
      changed_when: false

    - name: 각 php.ini 파일별 disable_functions 설정 진단
      ansible.builtin.shell: "grep -E '^\\s*disable_functions\\s*=' {{ item }} || echo 'disable_functions ='"
      loop: "{{ php_ini_files.stdout_lines }}"
      register: current_settings
      changed_when: false

    - name: 취약한 설정 파일 목록 생성
      ansible.builtin.set_fact:
        vulnerable_files: |
          {%- set v_files = [] -%}
          {%- for item in current_settings.results -%}
            {%- set current_line = item.stdout | trim -%}
            {%- set current_disabled = current_line.split('=')[1] | default('') | trim | replace(' ', '').split(',') -%}
            {%- set missing_functions = [] -%}
            {%- for func in required_disabled_functions -%}
              {%- if func not in current_disabled -%}
                {%- set _ = missing_functions.append(func) -%}
              {%- endif -%}
            {%- endfor -%}
            {%- if missing_functions | length > 0 -%}
              {%- set _ = v_files.append({
                  'file': item.item,
                  'current_setting': current_line,
                  'missing_functions': missing_functions
                }) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ v_files }}

    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ vulnerable_files | length > 0 }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (위험 함수가 비활성화되지 않은 설정 파일 발견){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "PHP 위험 함수 비활성화(disable_functions) 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "시스템 명령어 실행 등 위험한 PHP 함수가 비활성화되지 않았습니다." if is_vulnerable else "위험 함수가 모두 안전하게 비활성화되어 있습니다.",
                "vulnerable_files_found": vulnerable_files
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes

    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 누락된 위험 함수를 disable_functions에 추가
      ansible.builtin.lineinfile:
        path: "{{ item.file }}"
        regexp: '^\s*disable_functions\s*='
        line: "{{ item.current_setting }}{{ ',' if (item.current_setting | trim != 'disable_functions =') else '' }}{{ item.missing_functions | join(',') }}"
        backup: yes
      loop: "{{ vulnerable_files }}"
      register: r_config_change
      when: is_vulnerable
      notify: Reload PHP-FPM service

    - name: 핸들러 즉시 실행 (조치가 수행된 경우)
      ansible.builtin.meta: flush_handlers
      when: r_config_change.changed | default(false)

    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ r_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['PHP 설정 파일 수정 및 서비스 재시작'] if (r_config_change is defined and r_config_change.changed) else [] }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}

    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: yes

  # ----------------------------------------------------------------
  # 핸들러: 조치 시 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Reload PHP-FPM service
      block:
        - name: 실행 중인 PHP-FPM 서비스 이름 찾기
          ansible.builtin.shell: "systemctl list-units --type=service | grep 'php.*-fpm' | awk '{print $1}'"
          register: php_fpm_services
          changed_when: false

        - name: 발견된 모든 PHP-FPM 서비스 재시작
          ansible.builtin.systemd:
            name: "{{ item }}"
            state: reloaded
          loop: "{{ php_fpm_services.stdout_lines }}"