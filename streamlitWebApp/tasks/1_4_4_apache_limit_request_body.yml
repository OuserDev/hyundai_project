- name: Apache LimitRequestBody 설정 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    playbook_name: "apache_limit_request_body.yml"
    manual_remediation_guide: "Apache 설정 파일(apache2.conf)의 Directory 블록에 'LimitRequestBody 10240000'과 같이 업로드 크기 제한 설정을 추가하십시오. (10M은 예시이며, 서비스 환경에 맞게 조절)"
    apache_main_config: "/etc/apache2/apache2.conf"
    remediation_value: "10240000"
    
  
  tasks:
    # ----------------------------------------------------------------
    # 0. 사전 확인 (Nginx 설치 여부)
    # ----------------------------------------------------------------  
    - name: Apache 설치 여부 확인 (사전 확인)
      ansible.builtin.command: which apache2
      register: apache_installed
      changed_when: false
      failed_when: false
      
    - name: Apache 미설치 시 작업 종료
      when: apache_installed.rc != 0
      block:
        - name: Apache 미설치 메시지 출력
          debug:
            msg: "Apache가 설치되어 있지 않아 진단을 건너뜁니다."
        - name: 플레이북 실행 종료
          meta: end_play
          
    # ----------------------------------------------------------------
    # 2. 진단
    # ----------------------------------------------------------------

    - name: apache2.conf 파일에 <Directory> 옵션 라인 수 확인
      shell: |
        grep -i -E '^[^#]*<Directory' {{ apache_main_config }} | wc -l 
      register: Directory_lines
      changed_when: false
      failed_when: false
      
    - name: 전체 LimitRequestBody 설정 라인 수 (주석 제외)
      shell: |
        sed '/^\s*#/d' {{ apache_main_config }} | grep -i -c 'LimitRequestBody' || echo "0"
      register: limitbody_total_lines
      changed_when: false
      failed_when: false
      
    - name: 올바른 LimitRequestBody 숫자 설정 라인 수 (주석 제외)
      shell: |
        sed '/^\s*#/d' {{ apache_main_config }} | grep -i -c -E 'LimitRequestBody\s+[0-9]+(\s|$)' || echo "0"
      register: limitbody_valid_lines
      changed_when: false
      failed_when: false
    
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        total_Directory_count: "{{ Directory_lines.stdout | int }}" 
        total_limitbody_count: "{{ limitbody_total_lines.stdout | int }}"
        valid_limitbody_count: "{{ limitbody_valid_lines.stdout | int }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"
        # 직접 계산으로 처리
        is_vulnerable: >-
          {{
            ((limitbody_total_lines.stdout | int) > 0 and 
             (limitbody_total_lines.stdout | int) != (limitbody_valid_lines.stdout | int)) or
            ((Directory_lines.stdout | int) > 0 and 
             (limitbody_total_lines.stdout | int) == 0)
          }}

    # ----------------------------------------------------------------
    # 3. 진단 결과 보고
    # ----------------------------------------------------------------
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단 결과: {% if is_vulnerable %}취약 (apache2.conf에 LimitRequestBody 설정이 없습니다){% else %}양호{% endif %}"

    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "Apache 파일 업로드 크기 제한(LimitRequestBody) 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "DoS 공격 방지를 위한 LimitRequestBody 설정이 apache2.conf에 없습니다." if is_vulnerable else "apache2.conf에 LimitRequestBody 설정이 존재합니다.",
                "checked_file": apache_main_config
              },
              "remediation_tasks_performed": []
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no
      
    # ----------------------------------------------------------------
    # 4. 조치
    # ----------------------------------------------------------------
    - name: 조치 블록 (취약한 경우에만 실행)
      when: is_vulnerable
      block:
        - name: apache2.conf 파일에 'LimitRequestBody' 설정 추가
          ansible.builtin.lineinfile:
            path: "{{ apache_main_config }}"
            regexp: 'LimitRequestBody'
            line: '        LimitRequestBody {{ remediation_value }}'
            insertafter: '^<Directory\s/[a-zA-Z/]*>'
            backup: yes
          register: r_config_change
          notify: Reload apache service

        - name: 핸들러 즉시 실행
          ansible.builtin.meta: flush_handlers  
          
    # ----------------------------------------------------------------
    # 5. 조치 결과 보고
    # ----------------------------------------------------------------
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: "{{ r_config_change.changed | default(false) }}"
        remediation_tasks_performed: "{{ ['apache2.conf에 `LimitRequestBody` 추가 및 서비스 재시작'] if r_config_change.changed | default(false) else [] }}"
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: |
          총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
          {% elif not is_vulnerable %}조치 불필요 (양호)
          {% else %}조치 실패 (수동 조치 필요)
          --------------------------------------------------
          [수동 조치 권고]
          {{ manual_remediation_guide }}
          --------------------------------------------------
          {% endif %}            
          
    - name: 최종 JSON 보고서 파일 덮어쓰기
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([]),
              'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: no      
      
      
  # ----------------------------------------------------------------
  # 핸들러: 조치 시 문법 검사 및 서비스 재시작
  # ----------------------------------------------------------------
  handlers:
    - name: Reload apache service
      ansible.builtin.systemd:
        name: apache2
        state: reloaded    