---
- name: 진단 및 조치 - 불필요한 공유 폴더(NFS, Samba) 점검
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 점검 대상 ---
    nfs_process_name: "nfsd"
    samba_process_name: "smbd"
    nfs_service_name: "nfs-kernel-server" # Debian/Ubuntu 기준
    samba_service_name: "smbd"            # Debian/Ubuntu 기준

    # --- 보고서 관련 ---
    playbook_name: "1_2_5_remove_shared_folders.yml"
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # NFS 데몬(nfsd) 실행 여부 확인
    - name: NFS 프로세스 실행 여부 확인
      ansible.builtin.shell: "ps -ef | grep '[{{ nfs_process_name[0] }}]{{ nfs_process_name[1:] }}'"
      register: nfs_process_check
      changed_when: false
      failed_when: false

    # Samba 데몬(smbd) 실행 여부 확인
    - name: Samba 프로세스 실행 여부 확인
      ansible.builtin.shell: "ps -ef | grep '[{{ samba_process_name[0] }}]{{ samba_process_name[1:] }}'"
      register: samba_process_check
      changed_when: false
      failed_when: false

    # 개별 서비스 실행 여부 판단
    - name: 개별 서비스 실행 여부 판단
      ansible.builtin.set_fact:
        is_nfs_running: "{{ nfs_process_check.rc == 0 }}"
        is_samba_running: "{{ samba_process_check.rc == 0 }}"

    # 최종 취약 여부 종합 판단
    - name: 최종 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ is_nfs_running or is_samba_running }}"
        report_timestamp: "{{ ansible_date_time.iso8601 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (NFS 또는 Samba 서비스 실행 중){% else %}양호{% endif %}"

    # 초기 JSON 보고서 데이터 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": playbook_name,
              "task_description": "불필요한 공유 폴더(NFS, Samba) 점검",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": report_timestamp,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "파일 공유 서비스(NFS 또는 Samba)가 실행 중입니다. 불필요한 경우 비활성화가 필요합니다." if is_vulnerable else "점검 대상 파일 공유 서비스가 실행 중이지 않습니다.",
                "running_services": {
                  "nfs": is_nfs_running,
                  "samba": is_samba_running
                }
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치 (수동 조치 안내)
    # 자동으로 서비스를 중지하지 않고, 사용자에게 필요한 조치를 안내
    - name: 필요한 수동 조치 안내
      ansible.builtin.debug:
        msg:
          - "보안 점검 결과: 파일 공유 서비스(NFS 또는 Samba)가 실행 중입니다."
          - "실행중인 서비스:"
          - "  - NFS: {{ '예' if is_nfs_running else '아니오' }}"
          - "  - Samba: {{ '예' if is_samba_running else '아니오' }}"
          - "조치 권고:"
          - "  - 이 서비스들이 반드시 필요한지 확인하십시오."
          - "  - 불필요한 서비스라면 아래 명령어로 중지 및 비활성화하십시오."
          - "    (NFS): sudo systemctl disable --now {{ nfs_service_name }}"
          - "    (Samba): sudo systemctl disable --now {{ samba_service_name }}"
      when: is_vulnerable

    # 5. 조치 결과 보고
    # 수행된 조치 작업 기록 (자동 조치가 없으므로 '수동 조치 필요'로 기록)
    - name: 수행된 조치 작업 기록
      ansible.builtin.set_fact:
        remediation_done: false
        remediation_tasks_performed: "{{ ['수동 조치 필요'] if is_vulnerable else [] }}"
      when: is_vulnerable

    # 최종 JSON 보고서에 조치 결과 추가 및 저장
    - name: 최종 JSON 보고서에 조치 결과 추가 및 저장
      ansible.builtin.copy:
        content: |
          {{
            (lookup('file', result_json_path) | from_json) | combine({
              'remediation_applied': remediation_done | default(false),
              'remediation_result': '수동 조치 필요' if is_vulnerable else '조치 불필요',
              'remediation_timestamp': report_timestamp,
              'remediation_tasks_performed': remediation_tasks_performed | default([])
            }, recursive=True) | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false
      when: not ansible_check_mode