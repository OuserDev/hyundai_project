---
- name: 진단 및 조치 - 패스워드 최대 사용 기간 설정
  hosts: target_servers
  become: yes
  gather_facts: yes

  # 1. 변수 정의
  vars:
    # --- 설정 목표 ---
    max_days: 90
    # 패스워드 최대 사용 기간 : 90일
    min_days: 1
    # 패스워드 최소 사용 기간 : 즉시 비밀번호 변경을 방지하기 위해 1일로 설정.
    warn_age: 7
    # 패스워드 만료 전 경고 기간 : 만료 7일 전부터 사용자에게 경고 메시지 표시.
    
    # --- 설정 파일 ---
    login_defs_file: "/etc/login.defs"

    # --- 보고서 관련 ---
    remediation_tasks_performed: []

  tasks:
    # 2. 진단
    # /etc/login.defs의 기본값과, 기존 사용자들의 설정값을 동시에 진단
    - name: 패스워드 최대 사용 기간 진단
      ansible.builtin.shell: |
        # 1. login.defs의 PASS_MAX_DAYS가 {{ max_days }} 이하인지 확인
        MAX_DAYS_DEFAULT=$(grep -E "^\s*PASS_MAX_DAYS" {{ login_defs_file }} | awk '{print $2}')
        if [ -z "$MAX_DAYS_DEFAULT" ] || [ "$MAX_DAYS_DEFAULT" -gt {{ max_days }} ]; then
          exit 1 # 설정이 없거나 90일보다 크면 '취약'
        fi

        # 2. UID 1000 이상 일반 사용자 중 한 명이라도 최대 사용 기간이 90일을 초과하는지 확인
        # chage -l <user> | grep 'Maximum number' | cut -d: -f2
        for user in $(getent passwd | awk -F: '$3 >= 1000 && $7 !~ /(nologin|false)$/ {print $1}'); do
          user_max_days=$(chage -l "$user" | grep 'Maximum number' | cut -d: -f2 | xargs)
          if [ -n "$user_max_days" ] && [ "$user_max_days" -gt {{ max_days }} ]; then
            exit 1 # 한 명이라도 90일을 초과하면 '취약'
          fi
        done

        exit 0 # 모든 조건을 통과하면 '양호'
      args:
        executable: /bin/bash
      register: max_days_check
      changed_when: false
      failed_when: false

    # 진단 결과에 따라 취약 여부 변수 설정
    - name: 취약 여부 종합 판단
      ansible.builtin.set_fact:
        is_vulnerable: "{{ max_days_check.rc != 0 }}"

    # 3. 진단 결과 보고
    # 진단 결과를 콘솔에 간단히 출력
    - name: 진단 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "진단결과: {% if is_vulnerable %}취약 (신규/기존 사용자 정책이 90일을 초과){% else %}양호 (모든 사용자 90일 이하){% endif %}"

    # 초기 JSON 보고서 생성 및 저장
    - name: 초기 JSON 보고서 생성 및 저장
      ansible.builtin.copy:
        content: |
          {{
            {
              "playbook_name": "1.1.4_password_max_days.yml",
              "task_description": "패스워드 최대 사용 기간 설정",
              "diagnosis_result": "취약" if is_vulnerable else "양호",
              "is_vulnerable": is_vulnerable,
              "timestamp": ansible_date_time.iso8601,
              "hostname": inventory_hostname,
              "vulnerability_details": {
                "reason": "신규 사용자 정책(login.defs) 또는 일부 기존 사용자의 패스워드 최대 사용 기간이 90일을 초과합니다." if is_vulnerable else "모든 사용자의 패스워드 최대 사용 기간이 90일 이하로 올바르게 설정되어 있습니다.",
                "recommendation": "PASS_MAX_DAYS를 90일 이하로 설정하고, 모든 기존 사용자에게도 chage 명령어로 적용해야 합니다."
              }
            } | to_nice_json
          }}
        dest: "{{ result_json_path }}"
        mode: '0644'
      delegate_to: localhost
      become: false

    # 4. 조치
    - name: 패스워드 사용 기간 조치 블록
      block:
        # 신규 사용자 정책 설정
        - name: login.defs 기본값 설정
          ansible.builtin.lineinfile:
            path: "{{ login_defs_file }}"
            regexp: '^{{ item.key }}\s+'
            line: "{{ item.key }}\t{{ item.value }}"
            state: present
            backup: yes
          loop:
            - { key: 'PASS_MAX_DAYS', value: "{{ max_days }}" }
            - { key: 'PASS_MIN_DAYS', value: "{{ min_days }}" }
            - { key: 'PASS_WARN_AGE', value: "{{ warn_age }}" }
          register: login_defs_change

        # 기존 사용자 정책 설정을 위한 사용자 목록 가져오기
        - name: 일반 사용자 목록 가져오기
          ansible.builtin.getent:
            database: passwd
          register: all_users_info

        - name: 일반 사용자 필터링
          ansible.builtin.set_fact:
            regular_users: "{{ result_string | from_yaml }}"
          vars:
            result_string: |
              {% set users = [] %}
              {% for username, data in (all_users_info.ansible_facts.getent_passwd | default({})).items() %}
                {# [수정] UID(data[1])를 숫자로 변환(| int)하여 1000 이상인지 비교 #}
                {% if data[1] | int >= 1000 and data[5] is not in ['/usr/sbin/nologin', '/bin/false'] %}
                  {% set _ = users.append(username) %}
                {% endif %}
              {% endfor %}
              {{ users }}
              
        # 기존 사용자 정책 설정
        - name: 기존 사용자에 사용 기간 적용
          ansible.builtin.command: "chage -M {{ max_days }} -m {{ min_days }} -W {{ warn_age }} {{ item }}"
          loop: "{{ regular_users }}"
          register: chage_change
          changed_when: chage_change.rc == 0

      when: is_vulnerable

    # 5. 조치 결과 보고
    - name: 조치 내용 종합
      ansible.builtin.set_fact:
        # lineinfile은 변경 시 changed=true, chage는 항상 rc=0이므로 changed_when으로 상태 판단
        remediation_done: "{{ (login_defs_change.changed | default(false)) or (chage_change.changed | default(false)) }}"
        remediation_tasks_performed: >-
          {{ (['login.defs 정책 변경'] if login_defs_change.changed | default(false) else []) +
             (['기존 사용자 정책 변경'] if chage_change.changed | default(false) else []) }}
      when: is_vulnerable

    - name: 조치 결과 콘솔 출력
      ansible.builtin.debug:
        msg: "총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료{% elif not is_vulnerable %}조치 불필요 (양호){% else %}조치 실패{% endif %}"
      when: not ansible_check_mode

    - name: JSON 보고서에 조치 결과 추가
      ansible.builtin.set_fact:
        current_report_data: "{{ (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
            'remediation_timestamp': ansible_date_time.iso8601,
            'remediation_tasks_performed': remediation_tasks_performed | default([])
          }, recursive=True) }}"
      when: not ansible_check_mode and is_vulnerable

    - name: 최종 JSON 보고서 파일 저장
      ansible.builtin.copy:
        content: "{{ current_report_data | to_nice_json }}"
        dest: "{{ result_json_path }}"
        mode: '0644'
      when: not ansible_check_mode and is_vulnerable
      delegate_to: localhost
      become: false