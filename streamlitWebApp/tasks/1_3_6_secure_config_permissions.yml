- name: MySQL 환경설정 파일 접근 권한 진단 및 조치
  hosts: target_servers
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  become: yes
  gather_facts: no

  # 1. 변수 정의
  vars:
    playbook_name: "mysql_config_permission.yml"
    manual_remediation_guide: "MySQL 설정 파일의 권한을 640으로 설정하십시오. (예: chmod 640 /etc/my.cnf)"
    # 진단할 경로 리스트
    mysql_config_paths:
      - /etc/my.cnf
      - /etc/mysql/

  # ----------------------------------------------------------------
  # 2. 진단
  # ----------------------------------------------------------------
  tasks:
  - name: 설정 파일 권한이 640보다 넓게 설정되어 있는지 진단
    ansible.builtin.shell: "find {{ mysql_config_paths | join(' ') }} -type f -name '*.cnf' -perm /027 2>/dev/null | grep ."
    args:
      warn: no # find 명령어에서 경로가 없을 때 경고를 출력하지 않음
    register: permission_check
    changed_when: false
    failed_when: false # grep이 아무것도 못찾아도(rc=1) 오류가 아님

  - name: 취약 여부 종합 판단
    ansible.builtin.set_fact:
      is_vulnerable: "{{ permission_check.rc == 0 }}" # grep이 결과를 찾으면(rc=0) 취약
      vulnerable_files: "{{ permission_check.stdout_lines | default([]) | unique }}"
      report_timestamp: "{{ ansible_date_time.iso8601 }}"

  # ----------------------------------------------------------------
  # 3. 진단 결과 보고
  # ----------------------------------------------------------------
  - name: 진단 결과 콘솔 출력
    ansible.builtin.debug:
      msg: "진단 결과: {% if is_vulnerable %}취약 (권한이 넓은 설정 파일 발견: {{ vulnerable_files }}){% else %}양호{% endif %}"

  - name: 초기 JSON 보고서 생성 및 저장
    ansible.builtin.copy:
      content: |
        {{
          {
            "playbook_name": playbook_name,
            "task_description": "MySQL 환경설정 파일 접근 권한 점검",
            "diagnosis_result": "취약" if is_vulnerable else "양호",
            "is_vulnerable": is_vulnerable,
            "timestamp": report_timestamp,
            "hostname": inventory_hostname,
            "vulnerability_details": {
              "reason": "MySQL 설정 파일의 권한이 640보다 넓게 설정되어 있습니다." if is_vulnerable else "모든 MySQL 설정 파일의 권한이 640 이하로 적절히 설정되어 있습니다.",
              "vulnerable_files": vulnerable_files
            },
            "remediation_tasks_performed": []
          } | to_nice_json
        }}
      dest: "{{ result_json_path }}"
      mode: '0644'
    delegate_to: localhost
    become: yes

  # ----------------------------------------------------------------
  # 4. 조치
  # ----------------------------------------------------------------
  - name: 조치 블록 (취약한 경우에만 실행)
    when: is_vulnerable
    block:
      - name: 파일 권한을 '0640'으로 수정
        ansible.builtin.file:
          path: "{{ item }}"
          mode: '0640'
        loop: "{{ vulnerable_files }}"
        register: r_permission_fixes

  # ----------------------------------------------------------------
  # 5. 조치 결과 보고
  # ----------------------------------------------------------------
  - name: 수행된 조치 작업 기록
    ansible.builtin.set_fact:
      remediation_done: "{{ r_permission_fixes is defined and r_permission_fixes.changed }}"
      # 조치된 파일 목록을 기록
      remediation_tasks_performed: "{{ r_permission_fixes.results | selectattr('changed', 'equalto', true) | map(attribute='item') | list }}"
    when: is_vulnerable

  - name: 조치 결과 콘솔 출력
    ansible.builtin.debug:
      msg: |
        총괄 조치 결과: {% if remediation_done | default(false) %}조치 완료
        {% elif not is_vulnerable %}조치 불필요 (양호)
        {% else %}조치 실패 (수동 조치 필요)
        --------------------------------------------------
        [수동 조치 권고]
        {{ manual_remediation_guide }}
        --------------------------------------------------
        {% endif %}

  - name: 최종 JSON 보고서 파일 덮어쓰기
    ansible.builtin.copy:
      content: |
        {{
          (lookup('file', result_json_path) | from_json) | combine({
            'remediation_applied': remediation_done | default(false),
            'remediation_result': '조치 완료' if (remediation_done | default(false)) else ('조치 불필요' if not is_vulnerable else '조치 실패'),
            'remediation_timestamp': report_timestamp,
            'remediation_tasks_performed': remediation_tasks_performed | default([]),
            'remediation_guide': manual_remediation_guide if (is_vulnerable and not (remediation_done | default(false))) else ''
          }, recursive=True) | to_nice_json
        }}
      dest: "{{ result_json_path }}"
      mode: '0644'
    delegate_to: localhost
    become: yes