
---
# 플레이북 이름: root 계정의 원격 접속 제한 점검 및 조치
# 설명: SSH 및 Telnet을 통한 root 계정 원격 접속 설정을 진단하고 조치합니다.
- name: root 계정의 원격 접속 제한 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    sshd_config_file: /etc/ssh/sshd_config
    securetty_file: /etc/securetty
    pam_login_file: /etc/pam.d/login

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          ssh_root_login_status: "미확인 (SSH 서비스 미사용 추정)"
          telnet_root_login_status: "미확인 (Telnet 서비스 미사용 추정)"
          needs_ssh_fix: false
          needs_telnet_fix: false

    # 1.2. SSHD 서비스 상태 확인
    - name: SSHD 서비스 구동 여부 확인
      ansible.builtin.systemd:
        name: sshd
        state: started
      register: sshd_service_check
      ignore_errors: true
      failed_when: false # 서비스가 없어도 실패로 간주하지 않음

    - name: SSHD 서비스 구동 여부 결정
      ansible.builtin.set_fact:
        is_sshd_running: "{{ sshd_service_check.status.ActiveState | default('inactive') == 'active' }}"

    # 1.3. Telnet 서비스 상태 확인 (주로 xinetd를 통해 서비스됨)
    - name: Telnet 서비스 구동 여부 확인 (xinetd를 통해)
      ansible.builtin.shell: "grep -q 'disable\\s*=\\s*no' /etc/xinetd.d/telnet 2>/dev/null && echo 'active' || echo 'inactive'"
      register: telnet_service_check_xinetd
      changed_when: false
      ignore_errors: true

    - name: Telnet 서비스 구동 여부 결정
      ansible.builtin.set_fact:
        is_telnet_running: "{{ telnet_service_check_xinetd.stdout | default('inactive') == 'active' }}"

    # 1.4. 필요한 파일의 존재 여부 미리 확인
    - name: SSHD config 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ sshd_config_file }}"
      register: sshd_config_stat
      when: is_sshd_running

    - name: securetty 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ securetty_file }}"
      register: securetty_stat
      when: is_telnet_running

    - name: pam_login 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ pam_login_file }}"
      register: pam_login_stat
      when: is_telnet_running

    # 1.5. SSH root 로그인 설정 확인
    - name: SSHD config 파일 내용 읽기
      ansible.builtin.slurp:
        src: "{{ sshd_config_file }}"
      register: sshd_config_content_b64
      when: is_sshd_running and sshd_config_stat.stat.exists | default(false)

    - name: SSH root 로그인 설정 진단
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'ssh_root_login_status': '허용됨 (PermitRootLogin yes 또는 주석 처리)',
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['SSH를 통한 root 직접 로그인이 허용되어 있습니다.'],
              'needs_ssh_fix': true
            })
          }}
      when:
        - is_sshd_running
        - sshd_config_content_b64.content is defined
        - (sshd_config_content_b64.content | b64decode | regex_search('^\\s*PermitRootLogin\\s+yes', multiline=True)) or
          (sshd_config_content_b64.content | b64decode | regex_search('^\\s*#PermitRootLogin', multiline=True) and not (sshd_config_content_b64.content | b64decode | regex_search('^\\s*PermitRootLogin\\s+(no|prohibit-password|without-password)', multiline=True)))
          # PermitRootLogin yes가 있거나, 주석 처리되어 있고 명시적인 'no' 설정이 없는 경우 (기본값이 yes일 수 있음)

    - name: SSH root 로그인 설정 진단 (양호인 경우)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'ssh_root_login_status': '차단됨'
            })
          }}
      when:
        - is_sshd_running
        - sshd_config_content_b64.content is defined
        - not (diagnosis_results.needs_ssh_fix) # 이미 취약으로 판단되지 않았을 경우만 양호로 설정

    # 1.6. Telnet root 로그인 설정 확인 (/etc/securetty)
    - name: Telnet securetty 파일 내용 읽기
      ansible.builtin.slurp:
        src: "{{ securetty_file }}"
      register: securetty_content_b64
      when: is_telnet_running and securetty_stat.stat.exists | default(false)

    - name: Telnet securetty 설정 진단
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'telnet_root_login_status': '허용됨 (securetty에 pts 항목 존재)',
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['Telnet을 통한 root 직접 로그인이 /etc/securetty를 통해 허용되어 있습니다.'],
              'needs_telnet_fix': true
            })
          }}
      when:
        - is_telnet_running
        - securetty_content_b64.content is defined
        - securetty_content_b64.content | b64decode | regex_search('^\\s*pts/\\d+', multiline=True) # pts/0 ~ pts/x 존재 여부

    - name: Telnet securetty 설정 진단 (양호인 경우)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'telnet_root_login_status': '차단됨'
            })
          }}
      when:
        - is_telnet_running
        - securetty_content_b64.content is defined
        - not (diagnosis_results.needs_telnet_fix) # 이미 취약으로 판단되지 않았을 경우만 양호로 설정

    # 1.7. Telnet PAM 설정 확인 (/etc/pam.d/login)
    - name: Telnet PAM login 파일 내용 읽기
      ansible.builtin.slurp:
        src: "{{ pam_login_file }}"
      register: pam_login_content_b64
      when: is_telnet_running and pam_login_stat.stat.exists | default(false)

    - name: Telnet PAM login 설정 진단
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'telnet_root_login_status': '허용됨 (PAM pam_securetty.so 미사용)',
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['Telnet을 통한 root 직접 로그인이 PAM 설정을 통해 제한되지 않고 있습니다.'],
              'needs_telnet_fix': true
            })
          }}
      when:
        - is_telnet_running
        - pam_login_content_b64.content is defined
        - not (pam_login_content_b64.content | b64decode | regex_search('^\\s*auth\\s+required\\s+pam_securetty.so', multiline=True)) # securetty 모듈이 활성화되지 않은 경우
        - not diagnosis_results.needs_telnet_fix # securetty 파일 진단에서 이미 취약으로 판단되었으면 스킵

    # 1.8. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          SSH root 로그인 상태: {{ diagnosis_results.ssh_root_login_status }}
          Telnet root 로그인 상태: {{ diagnosis_results.telnet_root_login_status }}
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            {% if diagnosis_results.needs_ssh_fix %}
              - **SSH root 직접 로그인 차단:**
                - `{{ sshd_config_file }}` 파일을 편집하여 `PermitRootLogin no`로 변경하고, 주석(#)이 있다면 제거하십시오.
                - 변경 후에는 `sudo systemctl restart sshd` 명령으로 SSH 서비스를 재시작하십시오.
                - **경고:** SSH 설정을 변경하기 전에 반드시 다른 일반 사용자 계정으로 로그인하여 sudo 권한을 얻을 수 있는지 확인하십시오. 잘못된 설정은 시스템에 접근할 수 없게 만들 수 있습니다.
            {% endif %}
            {% if diagnosis_results.needs_telnet_fix %}
              - **Telnet root 직접 로그인 차단:** (Telnet은 기본적으로 보안에 취약하므로 사용을 권장하지 않습니다.)
                - `{{ securetty_file }}` 파일에서 `pts/0` ~ `pts/x`와 같은 `pts` 항목들을 제거하거나 주석 처리하십시오.
                - `{{ pam_login_file }}` 파일에 다음 줄이 없거나 주석 처리되어 있다면 추가하거나 주석을 해제하십시오:
                  `auth required pam_securetty.so`
                - 변경 후에는 Telnet 서비스를 재시작하거나, `xinetd` 서비스를 재시작하십시오 (예: `sudo systemctl restart xinetd`).
            {% endif %}
            - **일반 사용자 계정 사용:** root 계정 대신 일반 사용자 계정으로 로그인한 후 필요할 때 `su` 또는 `sudo` 명령을 사용하는 것을 권장합니다.
          {% else %}
            SSH 및 Telnet을 통한 root 직접 로그인이 차단되어 있습니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 (자동 조치) ---

    # 2.1. SSHD PermitRootLogin 설정 (자동 조치)
    - name: SSHD PermitRootLogin No 설정
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_file }}"
        regexp: '^#?PermitRootLogin.*'
        line: 'PermitRootLogin no'
        state: present
        backup: yes
      when: diagnosis_results.needs_ssh_fix
      notify: Restart sshd service

    # 2.2. Telnet /etc/securetty 파일 조치 (자동 조치)
    - name: Telnet /etc/securetty 파일에서 pts 항목 제거
      ansible.builtin.lineinfile:
        path: "{{ securetty_file }}"
        regexp: '^\\s*pts/\\d+'
        state: absent
        backup: yes
      when: diagnosis_results.needs_telnet_fix and securetty_stat.stat.exists | default(false) # securetty 파일이 있을 경우만 조치

    # 2.3. Telnet /etc/pam.d/login 파일 조치 (자동 조치)
    - name: Telnet /etc/pam.d/login 파일에 pam_securetty.so 추가
      ansible.builtin.lineinfile:
        path: "{{ pam_login_file }}"
        regexp: '^#?auth\\s+required\\s+pam_securetty.so'
        line: 'auth required pam_securetty.so'
        state: present
        create: true # 파일이 없으면 생성
        backup: yes
      when: diagnosis_results.needs_telnet_fix
      notify: Restart xinetd service

  handlers:
    - name: Restart sshd service
      ansible.builtin.systemd:
        name: sshd
        state: restarted

    - name: Restart xinetd service
      ansible.builtin.systemd:
        name: xinetd
        state: restarted
      ignore_errors: true # xinetd가 설치되지 않은 경우 오류 방지
