---
- name: SUID, SGID, Sticky bit 설정 파일 점검 및 조치 # 플레이북의 목적
  hosts: localhost # 이 플레이북이 실행될 대상 호스트
  become: yes # 시스템 파일 검색 및 권한 변경을 위해 root 권한이 필요합니다.

  vars:
    # SUID/SGID 파일을 검색할 때 제외할 경로 목록입니다.
    # 일반적으로 /proc, /sys, /dev 등과 같이 동적으로 생성되거나 특수한 파일 시스템은 제외합니다.
    excluded_paths_for_find:
      - /proc
      - /sys
      - /dev
      - /run
      - /var/run
      - /var/lock
      - /tmp # 임시 파일이 많고 SUID/SGID가 불필요한 경우가 많아 추가했습니다.

    # SUID/SGID 비트를 실제로 제거할 파일 목록입니다. (조치 시 사용)
    # 기본적으로는 비워둡니다. 여기에 나열된 파일에 대해서만 chmod -s 명령이 실행됩니다.
    # !! 매우 중요 !!
    # 이 목록에 파일을 추가하기 전에, 해당 파일이 시스템 운영에 필수적인 SUID/SGID 파일(예: sudo, passwd, mount)이 아닌지 반드시 확인해야 합니다.
    # 잘못된 파일을 제거할 경우 시스템 오작동이나 부팅 불가 등 심각한 문제가 발생할 수 있습니다.
    files_to_remove_suid_sgid: []
      # - /usr/bin/some_risky_tool # 예시: 실제 제거하고 싶은 파일의 절대 경로를 여기에 추가하세요.

  tasks:
    - name: "SUID/SGID 파일 검색 (모든 파일 찾기)"
      # `find` 모듈은 특정 권한 필터링에 제한이 있어, 먼저 모든 파일을 검색합니다.
      # `excludes` 옵션을 통해 정의된 제외 경로를 건너뜁니다.
      ansible.builtin.find:
        paths: / # 검색을 시작할 최상위 경로 (루트 디렉터리)
        file_type: file # 검색 대상을 파일로 한정 (디렉터리는 제외)
        excludes: "{{ excluded_paths_for_find }}" # 검색에서 제외할 경로 목록
      register: found_files # 발견된 파일 목록을 `found_files` 변수에 저장합니다.

    - name: "SUID/SGID 파일 필터링 및 정보 수집"
      # `find` 모듈로 찾은 각 파일에 대해 `stat` 모듈을 실행하여 상세 정보를 가져옵니다.
      # 이 태스크의 `when` 조건을 사용하여 SUID 또는 SGID 비트가 설정된 파일만 필터링합니다.
      ansible.builtin.stat:
        path: "{{ item.path }}" # `find` 모듈 결과에서 각 파일의 경로를 사용합니다.
      register: stat_results_suid_sgid # 각 `stat` 결과는 `stat_results_suid_sgid.results` 리스트에 저장됩니다.
      loop: "{{ found_files.files }}" # `find` 모듈이 찾은 파일 목록을 순회합니다.
      loop_control:
        label: "{{ item.path }}" # 루프 진행 상황을 표시할 때 사용할 레이블입니다.
      when:
        # 파일 경로가 유효하고, 비어있지 않으며, 제외 경로에 포함되지 않았는지 확인합니다.
        - item.path is defined and item.path | length > 0 and item.path not in excluded_paths_for_find
        # `stat` 정보가 존재하고, 파일이 실제로 존재하는지 확인합니다.
        - item.stat is defined and item.stat.exists
        # 파일의 권한(mode)이 SUID(0o4000) 또는 SGID(0o2000) 비트를 포함하는지 확인합니다.
        # `item.stat.mode | int`는 10진수 권한 값으로 변환하고, `&` 연산자를 사용하여 비트를 확인합니다.
        # `0o` 접두사는 YAML/Jinja2에서 8진수 리터럴을 나타냅니다.
        - (item.stat.mode | int & 0o4000) or (item.stat.mode | int & 0o2000)

    # --- SUID/SGID 설정 파일 진단 결과 출력을 위한 사전 처리 ---
    - name: "취약한 SUID/SGID 파일 목록 변수 초기화"
      # `debug` 메시지 출력을 위해 SUID/SGID 비트가 설정된 파일들만 모아둘 리스트 변수를 초기화합니다.
      set_fact:
        vulnerable_suid_sgid_files: []

    - name: "필터링된 SUID/SGID 파일을 취약 목록에 추가"
      # `stat_results_suid_sgid.results`는 `stat` 모듈의 전체 결과 딕셔너리를 포함합니다.
      # 이 딕셔너리 안에서 실제 파일의 stat 정보는 `item.stat`에, 원래 루프 항목은 `item.item`에 있습니다.
      set_fact:
        vulnerable_suid_sgid_files: "{{ vulnerable_suid_sgid_files + [
          {
            'path': item.stat.path, # **stat 결과의 경로 참조: item.stat.path**
            'mode': item.stat.mode | oct, # **stat 결과의 모드를 8진수로 변환: item.stat.mode | oct**
            'owner': item.stat.pw_name | default('알 수 없음'),
            'uid': item.stat.uid | default('N/A'),
            'group': item.stat.gr_name | default('알 수 없음'),
            'gid': item.stat.gid | default('N/A')
          }
        ] }}"
      loop: "{{ stat_results_suid_sgid.results }}" # `stat` 결과 리스트를 순회합니다.
      loop_control:
        label: "{{ item.item.path }}" # <--- **여기! `item` 아래에 다시 `item`이 있고 그 안에 `path`가 있습니다.**
      when:
        # 각 결과 항목이 유효하고, 파일이 존재하며, SUID 또는 SGID 비트가 설정되었는지 다시 확인합니다.
        # `item.stat`을 사용하여 stat 정보에 접근합니다.
        - item.stat.exists is defined and item.stat.exists
        - (item.stat.mode | int & 0o4000) or (item.stat.mode | int & 0o2000)

    - name: "SUID/SGID/Sticky bit 설정 파일 진단 결과 출력"
      # `debug` 모듈을 사용하여 최종 진단 결과를 출력합니다.
      # `vulnerable_suid_sgid_files` 리스트를 참조하여, 복잡한 로직 없이 깨끗하게 메시지를 구성합니다.
      ansible.builtin.debug:
        msg: |
          {% if vulnerable_suid_sgid_files | length > 0 %}
            <진단 결과: 취약>
            다음 파일들은 SUID 또는 SGID 비트가 설정되어 있습니다.
            세부 정보:
            {% for file_info in vulnerable_suid_sgid_files %} # 미리 필터링된 리스트를 순회
              - 경로: {{ file_info.path }}
                현재 권한 (8진수): {{ file_info.mode }}
                소유자: {{ file_info.owner }} (UID: {{ file_info.uid }})
                그룹: {{ file_info.group }} (GID: {{ file_info.gid }})
            {% endfor %}
            조치 권고: 위에 나열된 파일 중 불필요한 SUID/SGID 파일의 비트를 제거하십시오. (chmod -s)
          {% else %}
            <진단 결과: 양호>
            시스템에서 SUID 또는 SGID 비트가 설정된 파일을 발견하지 못했습니다.
          {% endif %}
      when: vulnerable_suid_sgid_files is defined # 결과가 있을 때만 출력 (사실상 항상 정의됨)

    # --- 조치: SUID, SGID 비트 제거 (선택 사항) ---
    # 이 태스크는 `files_to_remove_suid_sgid` 변수에 파일 경로가 명시되어 있을 때만 실행됩니다.
    # !! 이 조치는 시스템에 심각한 영향을 미칠 수 있으므로, 실행 전 매우 신중해야 합니다. !!
    - name: "SUID/SGID 비트 제거 (주의 필요!)"
      ansible.builtin.file:
        path: "{{ item }}" # `files_to_remove_suid_sgid` 리스트의 각 파일을 순회
        mode: "u-s,g-s" # 사용자의 SUID 비트와 그룹의 SGID 비트를 제거하는 권한 설정
      loop: "{{ files_to_remove_suid_sgid }}" # 제거할 파일 목록
      when: files_to_remove_suid_sgid is defined and files_to_remove_suid_sgid | length > 0 # 목록이 비어있지 않을 때만 실행

    - name: "SUID/SGID 비트 제거 후 재확인 메시지"
      # 실제로 조치를 시도했음을 사용자에게 알리는 메시지입니다.
      ansible.builtin.debug:
        msg: "지정된 파일들의 SUID/SGID 비트 제거를 시도했습니다. 시스템에서 변경사항을 다시 확인해보십시오."
      when: files_to_remove_suid_sgid is defined and files_to_remove_suid_sgid | length > 0 # 목록이 비어있지 않을 때만 출력
