---
# 플레이북 이름: DNS Zone Transfer 설정 점검 및 조치
# 설명: 비인가 Zone Transfer를 방지하기 위해 DNS 서비스의 allow-transfer 설정을 진단하고 조치합니다.
- name: DNS Zone Transfer 설정 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    named_conf_path: /etc/named.conf # named.conf 파일 경로
    # 허용할 Zone Transfer 대상 IP 주소 (예시, 실제 환경에 맞게 조정 필요)
    # 여기에 복제 서버의 IP 주소를 입력해야 합니다.
    allowed_transfer_ips:
      - "10.10.10.111"
      - "10.10.10.112"
      # - "192.168.1.0/24" # 필요하다면 서브넷도 추가 가능

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. named (BIND) 프로세스 확인
    - name: named (BIND) 프로세스 구동 여부 확인
      ansible.builtin.shell: "ps -ef | grep -q named && echo 'running' || echo 'not running'"
      register: named_process_check
      changed_when: false
      ignore_errors: true

    # 1.2. named.conf 파일 존재 여부 확인
    - name: named.conf 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ named_conf_path }}"
      register: named_conf_stat

    # 1.3. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          dns_status: "미사용"
          needs_zone_transfer_fix: false

    # 1.4. DNS Zone Transfer 설정 진단
    - name: DNS Zone Transfer 설정 진단
      block:
        - name: named.conf 파일 내용 읽기
          ansible.builtin.slurp:
            src: "{{ named_conf_path }}"
          register: named_conf_content_b64

        - name: named.conf 내용 디코딩
          ansible.builtin.set_fact:
            named_conf_content: "{{ named_conf_content_b64['content'] | b64decode }}"

        - name: allow-transfer 설정 확인
          ansible.builtin.set_fact:
            current_allow_transfer_setting: >-
              {{ named_conf_content | regex_findall('allow-transfer\\s*\\{[^\\}]*\\};') | first | default('') }}

        - name: Zone Transfer 취약점 진단 로직 적용
          ansible.builtin.set_fact:
            diagnosis_results: >-
              {{
                diagnosis_results | combine({
                  'dns_status': '사용 중',
                  'status': '취약',
                  'reasons': diagnosis_results.reasons + ['DNS Zone Transfer가 모든 사용자에게 허용되어 있거나 적절히 제한되어 있지 않습니다.'],
                  'needs_zone_transfer_fix': true
                })
              }}
          when:
            - named_conf_content is not search('allow-transfer') or # allow-transfer 설정이 아예 없거나
            - current_allow_transfer_setting | default('') | search('any;') or # 'any'로 허용되어 있거나
            - (current_allow_transfer_setting | default('') | length > 0 and (allowed_transfer_ips | map('regex_escape') | join('|') is not in current_allow_transfer_setting)) # 특정 IP가 설정되어 있지 않으면

      when:
        - named_process_check.stdout == 'running'
        - named_conf_stat.stat.exists # named.conf 파일이 존재할 경우에만 진단

    # 1.5. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          DNS 서비스 상태: {{ diagnosis_results.dns_status }}
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - `{{ named_conf_path }}` 파일의 `options` 블록 또는 개별 `zone` 블록에 `allow-transfer` 설정을 추가/수정하여 Zone Transfer를 허용할 특정 서버 IP 주소만 지정하십시오.
            - 예시: `allow-transfer { {{ allowed_transfer_ips | join('; ') }}; };`
            - 변경 후에는 DNS 서비스(named)를 재시작해야 합니다.
          {% else %}
            DNS 서비스가 사용되지 않거나, Zone Transfer가 적절하게 제한되어 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 조치: allow-transfer 설정을 추가/수정
    - name: named.conf에 allow-transfer 설정 추가/수정 (조치)
      ansible.builtin.blockinfile:
        path: "{{ named_conf_path }}"
        block: |
          options {
              allow-transfer { {{ allowed_transfer_ips | join('; ') }}; };
          };
        marker: "# {mark} ANSIBLE MANAGED BLOCK for allow-transfer"
        insertafter: "options {" # options 블록 바로 뒤에 삽입하거나 적절한 위치를 찾아야 합니다.
        backup: yes
      when:
        - ansible_check_mode is not defined
        - diagnosis_results.needs_zone_transfer_fix
        - named_process_check.stdout == 'running'
        - named_conf_stat.stat.exists
      notify: Restart named service

  handlers:
    - name: named 서비스 재시작
      ansible.builtin.service:
        name: named
        state: restarted
      when: named_process_check.stdout == 'running'
