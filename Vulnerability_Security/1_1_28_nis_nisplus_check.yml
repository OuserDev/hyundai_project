
---
# 플레이북 이름: NIS, NIS+ 서비스 비활성화 점검 및 조치
# 설명: 보안상 취약한 NIS/NIS+ 서비스로 인한 비인가자 root 권한 획득 및 침해사고 발생 위험을 방지하기 위해
#       관련 데몬의 구동 여부를 진단하고, 활성화되어 있을 경우 비활성화 조치를 수행합니다.
- name: NIS, NIS+ 서비스 비활성화 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # NIS/NIS+ 관련 주요 데몬 목록을 정의합니다.
    nis_daemons:
      - ypserv
      - ypbind
      - ypxfrd
      - rpc.yppasswdd
      - rpc.ypupdated
    
    # 이 서비스들이 systemd 유닛으로 관리되는 경우의 이름 (일반적)
    nis_systemd_services:
      - ypbind.service
      - ypserv.service
      # 시스템에 따라 다른 관련 서비스 유닛이 있을 수 있음.

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. 프로세스 목록에서 NIS/NIS+ 데몬 구동 여부를 확인합니다.
    - name: 프로세스에서 NIS/NIS+ 데몬 구동 여부 확인
      ansible.builtin.shell: "ps -ef | egrep \"{{ item }}\" | grep -v 'grep'"
      # args:
      #   warn: false # 이 줄이 오류의 원인이므로 제거합니다.
      register: nis_daemon_process_check
      loop: "{{ nis_daemons }}"
      loop_control:
        loop_var: item
      changed_when: false # 상태 변경 목적이 아니므로 항상 changed_when: false
      ignore_errors: true # grep이 결과를 찾지 못해 1을 반환해도 오류로 처리하지 않도록 합니다.

    # 1.2. systemd 서비스를 통해 NIS/NIS+ 데몬 구동 여부를 확인합니다. (systemd 환경일 경우)
    - name: systemd를 통한 NIS/NIS+ 서비스 상태 확인
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started # 'active' 상태인지 확인
      register: nis_systemd_service_check
      loop: "{{ nis_systemd_services }}"
      loop_control:
        loop_var: item
      ignore_errors: true # 서비스가 없거나 비활성화되어 있어도 오류로 처리하지 않음
      when: ansible_service_mgr == 'systemd' # systemd 사용 환경에서만 실행

    # 1.3. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          active_nis_daemons_to_stop: [] # 중지해야 할 활성 NIS/NIS+ 데몬 목록

    # 1.4. 프로세스 확인 결과를 기반으로 진단 로직 적용
    - name: 프로세스 기반 NIS/NIS+ 진단 로직 적용
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['프로세스에서 NIS/NIS+ 데몬 "' + item.item + '"이(가) 구동 중입니다.'],
              'active_nis_daemons_to_stop': (diagnosis_results.active_nis_daemons_to_stop | default([])) + [item.item]
            })
          }}
      loop: "{{ nis_daemon_process_check.results }}"
      loop_control:
        loop_var: item
      when: item.stdout | length > 0 # stdout에 내용이 있으면 (프로세스가 발견되면)

    # 1.5. systemd 서비스 확인 결과를 기반으로 진단 로직 적용
    - name: systemd 기반 NIS/NIS+ 진단 로직 적용
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['systemd 서비스 "' + item.item + '"이(가) 활성화되어 있습니다.'],
              'active_nis_daemons_to_stop': (diagnosis_results.active_nis_daemons_to_stop | default([])) + [item.item]
            })
          }}
      loop: "{{ nis_systemd_service_check.results }}"
      loop_control:
        loop_var: item
      when:
        - item.skipped is not defined # 태스크가 스킵되지 않았고
        - item.status is defined # 서비스 상태 정보가 있고
        - item.status.ActiveState == 'active' # 서비스가 활성화 상태일 때

    # 중복 데몬 이름 제거 (프로세스와 systemd에서 중복으로 잡힐 수 있으므로)
    - name: 중지할 NIS/NIS+ 데몬 목록 중복 제거
      ansible.builtin.set_fact:
        diagnosis_results: "{{ diagnosis_results | combine({'active_nis_daemons_to_stop': (diagnosis_results.active_nis_daemons_to_stop | default([]) | unique)}) }}"

    # 1.6. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - 불필요한 NIS, NIS+ 관련 데몬을 중지하십시오.
            - `kill -9 [PID]` 또는 `systemctl stop/disable [서비스명]` 명령을 사용하십시오.
            - NIS 서비스 사용이 불가피하다면 NIS+를 사용하는 것을 권장합니다.
          {% else %}
            NIS, NIS+ 서비스가 구동 중이지 않아 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 조치: 활성화된 NIS/NIS+ 데몬/서비스를 비활성화합니다.
    - name: 활성화된 NIS/NIS+ 서비스 중지 및 비활성화 조치
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped  # 서비스 중지
        enabled: no     # 부팅 시 자동 시작 비활성화
      loop: "{{ diagnosis_results.active_nis_daemons_to_stop }}"
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 실제 조치 수행
        - diagnosis_results.active_nis_daemons_to_stop | length > 0 # 중지할 데몬이 있을 때만 실행
        - ansible_service_mgr == 'systemd' # systemd 환경에서만 systemd 모듈 사용

    # 조치: systemd가 아닌 환경이거나 systemd 서비스명이 없는 데몬의 경우, 프로세스 kill 시도
    - name: 활성화된 NIS/NIS+ 데몬 프로세스 강제 종료 (fallback for non-systemd or specific daemons)
      ansible.builtin.shell: "kill -9 $(ps -ef | egrep \"{{ item }}\" | grep -v 'grep' | awk '{print $2}') || true"
      loop: "{{ diagnosis_results.active_nis_daemons_to_stop }}"
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 실제 조치 수행
        - diagnosis_results.active_nis_daemons_to_stop | length > 0 # 중지할 데몬이 있을 때만 실행
        # systemd 서비스로 처리되지 않는 경우에만 실행하거나, 강제 종료가 필요한 경우
        - (ansible_service_mgr != 'systemd') or (item not in nis_systemd_services)
      failed_when: false # kill 명령이 실패해도 전체 플레이북이 실패하지 않도록

    # 조치 완료 메시지 출력
    - name: 조치 완료 메시지
      ansible.builtin.debug:
        msg: "NIS, NIS+ 서비스 관련 데몬들에 대한 비활성화 조치를 시도했습니다. 시스템에서 변경사항을 확인해보십시오."
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 출력
        - diagnosis_results.status == '취약' # 취약점이 발견되어 조치가 시도되었을 경우
