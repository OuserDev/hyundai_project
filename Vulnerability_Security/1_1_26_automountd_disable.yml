---
# 플레이북 이름: automountd 제거 점검 및 조치
# 설명: 로컬 공격자가 automountd 프로세스 권한으로 임의 명령을 실행하거나
#       root 권한을 획득할 수 있는 위험을 방지하기 위해 automount 서비스를 비활성화합니다.
- name: automountd 제거 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # automount 서비스를 관리하는 데몬 이름입니다.
    automount_service_name: autofs # 대부분의 최신 시스템에서 automountd는 autofs 서비스로 관리됩니다.
    # autofs 서비스 유닛 파일의 일반적인 경로들입니다.
    autofs_service_paths:
      - /etc/systemd/system/autofs.service
      - /usr/lib/systemd/system/autofs.service
    # 변수 초기화: 기본값을 False로 설정하여 정의되지 않은 오류 방지
    autofs_file_exists: false

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. automount 서비스 유닛 파일의 존재 여부를 먼저 확인합니다.
    - name: Automount 서비스 유닛 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ item }}"
      register: autofs_unit_file_check
      loop: "{{ autofs_service_paths }}"
      loop_control:
        loop_var: item
      ignore_errors: true # 파일이 없어도 오류로 처리하지 않습니다.

    - name: Automount 서비스 파일이 실제로 존재하는지 확인 변수 설정
      ansible.builtin.set_fact:
        # results 리스트가 비어있을 경우 default([])를 사용하여 오류 방지
        autofs_file_exists: "{{ (autofs_unit_file_check.results | default([]) | selectattr('stat.exists', 'defined') | selectattr('stat.exists', 'true') | list | length > 0) }}"

    # 1.2. automount 서비스(autofs)의 상태를 확인합니다. (파일이 존재할 경우에만)
    - name: Automount 서비스 ({{ automount_service_name }}) 상태 확인 (파일 존재 시)
      ansible.builtin.systemd:
        name: "{{ automount_service_name }}"
        state: started # 'active' 상태인지 확인합니다.
      register: automount_status
      when: autofs_file_exists # 서비스 유닛 파일이 존재할 경우에만 이 태스크를 실행합니다.
      ignore_errors: true # 서비스가 비활성화되어 있거나 찾지 못해도 오류로 처리하지 않습니다.

    # 1.3. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []

    # 1.4. automount 서비스의 상태를 기반으로 진단 로직을 적용합니다.
    - name: Automount 서비스 진단 로직 적용
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['Automount 서비스 (' + automount_service_name + ')이(가) 활성화되어 있습니다.'],
            })
          }}
      when:
        - autofs_file_exists # 서비스 유닛 파일이 존재하고
        - automount_status.status is defined # 서비스 상태 정보가 있고
        - automount_status.status.ActiveState == 'active' # 서비스가 활성화(active) 상태일 때

    # 1.5. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - automount 서비스({{ automount_service_name }})를 비활성화하십시오.
            - `systemctl stop {{ automount_service_name }}` 명령으로 서비스를 중지하고
            - `systemctl disable {{ automount_service_name }}` 명령으로 부팅 시 자동 시작을 비활성화하십시오.
            - NFS 및 Samba 서비스에서 automountd 사용 여부를 확인하고, 필요하지 않다면 조치하십시오.
          {% else %}
            automount 서비스가 비활성화되어 양호합니다. (서비스 유닛 파일이 없거나 비활성화되어 있습니다.)
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 조치: automount 서비스(autofs)를 중지하고 부팅 시 비활성화합니다.
    - name: Automount 서비스 ({{ automount_service_name }}) 비활성화 조치
      ansible.builtin.systemd:
        name: "{{ automount_service_name }}"
        state: stopped # 서비스 중지
        enabled: no     # 부팅 시 자동 시작 비활성화
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 실제 조치 수행
        - diagnosis_results.status == '취약' # 취약점으로 진단되었을 경우에만 조치
        - autofs_file_exists # 서비스 유닛 파일이 실제로 존재할 때만 조치

    # 조치 완료 메시지 출력
    - name: 조치 완료 메시지
      ansible.builtin.debug:
        msg: "Automount 서비스({{ automount_service_name }})에 대한 비활성화 조치를 시도했습니다. 시스템에서 변경사항을 확인해보십시오."
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 출력
        - diagnosis_results.status == '취약' # 취약점으로 진단되어 조치가 시도되었을 경우
