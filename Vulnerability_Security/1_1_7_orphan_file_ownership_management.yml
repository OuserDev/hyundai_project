---
- name: 파일 및 디렉토리 관리 - 소유자/그룹이 존재하지 않는 파일 및 디렉터리 처리
  hosts: local
  become: yes # 이 플레이북은 시스템 변경을 수행하므로, root 권한이 필요합니다.

  vars:
    # 소유자/그룹이 존재하지 않는 파일을 검색할 경로 목록입니다.
    # 중요: 전체 파일 시스템('/')을 검색하는 것은 시스템 부하가 매우 크고 시간이 오래 걸립니다.
    # 따라서, 실제 운영 환경에서는 필요한 경로로 범위를 제한하는 것이 좋습니다.
    search_paths_for_orphans:
      - "/etc"
      - "/tmp"
      - "/bin"
      - "/sbin"
      - "/var/log"
      - "/opt"
      - "/home"
      # - "/" # 전체 시스템 검색 시 매우 신중하게 추가하세요. (성능에 큰 영향)

    # 소유자/그룹이 없는 파일을 발견했을 때 수행할 기본 동작을 정의합니다.
    # 'delete': 해당 파일 또는 디렉터리를 삭제합니다. (매우 주의 필요!)
    # 'chown_to_root': 해당 파일 또는 디렉터리의 소유권을 'root:root'로 변경합니다. (권장)
    default_orphan_action: 'chown_to_root' # 또는 'delete' 선택 가능

  tasks:
    - name: "소유자 또는 그룹이 존재하지 않는 파일 및 디렉터리 검색"
      # find 모듈을 사용하여 지정된 경로에서 파일 및 디렉터리를 검색합니다.
      # 이 태스크는 'nouser' (소유자 없음) 또는 'nogroup' (그룹 없음) 조건을 직접 제공하지 않으므로,
      # 후속 태스크에서 stat, getent 모듈을 조합하여 유효성을 검사합니다.
      ansible.builtin.find:
        paths: "{{ search_paths_for_orphans }}" # 검색할 경로 목록
        file_type: any # 모든 종류의 파일 시스템 객체 (파일, 디렉토리, 심볼릭 링크 등) 검색
      register: orphan_files_and_dirs # 검색 결과를 'orphan_files_and_dirs' 변수에 저장

    - name: "찾은 파일/디렉터리의 소유자 및 그룹 유효성 검사"
      # find 모듈이 반환한 각 파일/디렉터리에 대해 stat 모듈을 실행하여 상세 정보를 가져옵니다.
      # 여기서 파일의 UID/GID, 소유자/그룹 이름 등을 확보합니다.
      ansible.builtin.stat:
        path: "{{ item.path }}" # find 모듈 결과에서 각 항목의 경로를 사용합니다.
      register: stat_results # 각 stat 결과는 'stat_results.results' 리스트에 저장됩니다.
      loop: "{{ orphan_files_and_dirs.files }}" # find 모듈이 찾은 파일 목록을 순회합니다.
      loop_control:
        label: "{{ item.path }}" # 루프 진행 상황을 표시할 때 사용할 레이블입니다.

    - name: "시스템 사용자 정보 가져오기"
      # getent 모듈을 사용하여 시스템의 모든 사용자(passwd 데이터베이스) 정보를 가져옵니다.
      # 이는 stat 모듈에서 얻은 UID가 실제 시스템 사용자인지 확인하는 데 사용됩니다.
      ansible.builtin.getent:
        database: passwd
      register: all_users_info # 사용자 정보를 'all_users_info' 변수에 저장합니다.

    - name: "시스템 그룹 정보 가져오기"
      # getent 모듈을 사용하여 시스템의 모든 그룹(group 데이터베이스) 정보를 가져옵니다.
      # 이는 stat 모듈에서 얻은 GID가 실제 시스템 그룹인지 확인하는 데 사용됩니다.
      ansible.builtin.getent:
        database: group
      register: all_groups_info # 그룹 정보를 'all_groups_info' 변수에 저장합니다.

    - name: "처리할 고아(Orphan) 파일/디렉터리 목록 초기화"
      # 고아 파일 목록을 저장할 변수를 초기화합니다.
      set_fact:
        files_to_process: []

    - name: "고아 파일/디렉터리 목록 채우기"
      # stat_results에서 가져온 각 파일의 정보를 기반으로 실제 '고아' 파일을 식별하여 목록에 추가합니다.
      # 이 조건문은 여러 번의 오류를 거치며 가장 견고한 형태로 수정되었습니다.
      set_fact:
        files_to_process: "{{ files_to_process + [ item.item.path ] }}"
      loop: "{{ stat_results.results }}" # stat 모듈의 각 결과를 순회합니다.
      loop_control:
        label: "{{ item.item.path }}" # 루프 진행 상황을 표시할 레이블입니다.
      when: | # 멀티라인 조건문 사용 (Jinja2 템플릿 내부에서는 # 주석 사용 불가)
        item.stat.exists is defined and item.stat.exists and
        (
          (item.stat.pw_name is not defined or item.stat.pw_name == '' or
           (
             all_users_info.passwd is defined and all_users_info.passwd is not none and
             all_users_info.passwd.__class__.__name__ == 'dict' and
             all_users_info.passwd | length > 0 and
             item.stat.uid not in (all_users_info.passwd | dict2items | map(attribute='value.1') | map('int') | list)
           )
          )
          or
          (item.stat.gr_name is not defined or item.stat.gr_name == '' or
           (
             all_groups_info.group is defined and all_groups_info.group is not none and
             all_groups_info.group.__class__.__name__ == 'dict' and
             all_groups_info.group | length > 0 and
             item.stat.gid not in (all_groups_info.group | dict2items | map(attribute='value.1') | map('int') | list)
           )
          )
        )

    - name: "고아 파일/디렉터리 처리 (기본 동작: {{ default_orphan_action }}) - 삭제"
      # 'default_orphan_action'이 'delete'로 설정되어 있고, 처리할 파일이 있을 경우 삭제를 수행합니다.
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent # 파일 또는 디렉터리를 삭제합니다.
      loop: "{{ files_to_process }}"
      when: default_orphan_action == 'delete' and files_to_process | length > 0

    - name: "고아 파일/디렉터리 소유권 변경 (기본 동작: {{ default_orphan_action }}) - root로 변경"
      # 'default_orphan_action'이 'chown_to_root'로 설정되어 있고, 처리할 파일이 있을 경우 소유권을 변경합니다.
      ansible.builtin.file:
        path: "{{ item }}"
        owner: root # 소유자를 root로 설정
        group: root # 그룹을 root로 설정
        state: file # 파일 또는 디렉터리 모두에 적용될 수 있도록 'file' 상태 명시
      loop: "{{ files_to_process }}"
      when: default_orphan_action == 'chown_to_root' and files_to_process | length > 0

    - name: "처리된 고아 파일/디렉터리 목록 출력 (확인용)"
      # 실제로 어떤 파일들이 처리되었는지 디버그 메시지로 출력합니다.
      ansible.builtin.debug:
        msg: "다음 파일/디렉터리가 처리되었습니다 (액션: {{ default_orphan_action }}): {{ files_to_process }}"
      when: files_to_process | length > 0 # 처리된 파일이 있을 경우에만 메시지를 출력합니다.

    - name: "고아 파일/디렉터리가 발견되지 않았을 경우 메시지"
      # 고아 파일이 발견되지 않았을 때 표시할 메시지입니다.
      ansible.builtin.debug:
        msg: "소유자/그룹이 존재하지 않는 파일/디렉터리가 발견되지 않았습니다."
      when: files_to_process | length == 0 # 처리된 파일이 없을 경우에만 메시지를 출력합니다.
