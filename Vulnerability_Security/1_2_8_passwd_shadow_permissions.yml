---
# 플레이북 이름: 계정 및 패스워드 파일 소유자 및 권한 설정 점검 및 조치
# 설명: /etc/passwd 및 /etc/shadow 파일의 소유자와 권한을 점검하고 필요시 조치합니다.
- name: 계정 및 패스워드 파일 소유자 및 권한 설정 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    passwd_file: /etc/passwd
    shadow_file: /etc/shadow
    # 권고되는 권한 및 소유자
    passwd_mode: "0644" # rw-r--r--
    shadow_mode: "0400" # r--------
    required_owner: "root"
    required_group_passwd: "root" # /etc/passwd는 일반적으로 root:root
    required_group_shadow: "shadow" # /etc/shadow는 일반적으로 root:shadow (혹은 root:root)

  tasks:
    # --- 1. 진단 섹션 시작 ---

    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          needs_fix: false
          passwd_status:
            owner_ok: true
            mode_ok: true
            current_owner: "N/A"
            current_mode: "N/A"
          shadow_status:
            owner_ok: true
            mode_ok: true
            current_owner: "N/A"
            current_mode: "N/A"

    - name: /etc/passwd 파일 정보 확인
      ansible.builtin.stat:
        path: "{{ passwd_file }}"
      register: passwd_stat_info

    - name: /etc/shadow 파일 정보 확인
      ansible.builtin.stat:
        path: "{{ shadow_file }}"
      register: shadow_stat_info

    - name: /etc/passwd 진단 결과 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'passwd_status': {
                  'owner_ok': passwd_stat_info.stat.pw_name == required_owner and passwd_stat_info.stat.gr_name == required_group_passwd,
                  'mode_ok': passwd_stat_info.stat.mode == passwd_mode,
                  'current_owner': passwd_stat_info.stat.pw_name,
                  'current_mode': passwd_stat_info.stat.mode
              }
            }, recursive=True)
          }}
      when: passwd_stat_info.stat.exists

    - name: /etc/shadow 진단 결과 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'shadow_status': {
                  'owner_ok': shadow_stat_info.stat.pw_name == required_owner and (shadow_stat_info.stat.gr_name == required_group_shadow or shadow_stat_info.stat.gr_name == required_owner),
                  'mode_ok': shadow_stat_info.stat.mode == shadow_mode,
                  'current_owner': shadow_stat_info.stat.pw_name,
                  'current_mode': shadow_stat_info.stat.mode
              }
            }, recursive=True)
          }}
      when: shadow_stat_info.stat.exists

    - name: 최종 진단 결과 업데이트 (취약 여부 판단)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'status': '취약',
              'needs_fix': true,
              'reasons': diagnosis_results.reasons + [
                  '{{ passwd_file }} 파일의 소유자 또는 권한이 올바르지 않습니다.'
                ] if not diagnosis_results.passwd_status.owner_ok or not diagnosis_results.passwd_status.mode_ok else []
            }) | combine({
              'reasons': diagnosis_results.reasons + [
                  '{{ shadow_file }} 파일의 소유자 또는 권한이 올바르지 않습니다.'
                ] if not diagnosis_results.shadow_status.owner_ok or not diagnosis_results.shadow_status.mode_ok else []
            })
          }}
      when:
        - not diagnosis_results.passwd_status.owner_ok or not diagnosis_results.passwd_status.mode_ok or
          not diagnosis_results.shadow_status.owner_ok or not diagnosis_results.shadow_status.mode_ok

    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          파일: {{ passwd_file }}
            - 현재 소유자: {{ diagnosis_results.passwd_status.current_owner }} (권고: {{ required_owner }}:{{ required_group_passwd }})
            - 현재 권한: {{ diagnosis_results.passwd_status.current_mode }} (권고: {{ passwd_mode }})
            {% if not diagnosis_results.passwd_status.owner_ok %}
              - 사유: 소유자가 root가 아닙니다.
            {% endif %}
            {% if not diagnosis_results.passwd_status.mode_ok %}
              - 사유: 권한이 644(rw-r--r--)가 아닙니다.
            {% endif %}

          파일: {{ shadow_file }}
            - 현재 소유자: {{ diagnosis_results.shadow_status.current_owner }} (권고: {{ required_owner }}:{{ required_group_shadow }} 또는 root:root)
            - 현재 권한: {{ diagnosis_results.shadow_status.current_mode }} (권고: {{ shadow_mode }})
            {% if not diagnosis_results.shadow_status.owner_ok %}
              - 사유: 소유자가 root가 아니거나 그룹이 shadow/root가 아닙니다.
            {% endif %}
            {% if not diagnosis_results.shadow_status.mode_ok %}
              - 사유: 권한이 400(r--------)이 아닙니다.
            {% endif %}

          {% if diagnosis_results.needs_fix %}
            조치 권고:
            - `{{ passwd_file }}` 파일 권한을 `644`로, 소유자를 `root:root`로 변경하십시오.
              (예: `sudo chmod 644 {{ passwd_file }}` / `sudo chown root:root {{ passwd_file }}`)
            - `{{ shadow_file }}` 파일 권한을 `400`로, 소유자를 `root:shadow` 또는 `root:root`로 변경하십시오.
              (예: `sudo chmod 400 {{ shadow_file }}` / `sudo chown root:shadow {{ shadow_file }}`)
            - **경고: 이 파일들의 권한 및 소유자를 잘못 변경하면 시스템 로그인 불능 등 심각한 문제가 발생할 수 있으므로, 신중하게 조치하십시오.**
          {% else %}
            `{{ passwd_file }}` 및 `{{ shadow_file }}` 파일의 소유자 및 권한 설정이 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---

    - name: /etc/passwd 파일 권한을 644로 설정
      ansible.builtin.file:
        path: "{{ passwd_file }}"
        mode: "{{ passwd_mode }}"
      when: not diagnosis_results.passwd_status.mode_ok and diagnosis_results.needs_fix

    - name: /etc/passwd 파일 소유자를 root로 설정
      ansible.builtin.file:
        path: "{{ passwd_file }}"
        owner: "{{ required_owner }}"
        group: "{{ required_group_passwd }}"
      when: not diagnosis_results.passwd_status.owner_ok and diagnosis_results.needs_fix

    - name: /etc/shadow 파일 권한을 400으로 설정
      ansible.builtin.file:
        path: "{{ shadow_file }}"
        mode: "{{ shadow_mode }}"
      when: not diagnosis_results.shadow_status.mode_ok and diagnosis_results.needs_fix

    - name: /etc/shadow 파일 소유자를 root로 설정
      ansible.builtin.file:
        path: "{{ shadow_file }}"
        owner: "{{ required_owner }}"
        group: "{{ required_group_shadow }}" # 일반적으로 shadow 그룹이지만, root도 허용
      when: not diagnosis_results.shadow_status.owner_ok and diagnosis_results.needs_fix
