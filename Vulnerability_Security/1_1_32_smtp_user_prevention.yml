---
# 플레이북 이름: 일반 사용자의 Sendmail/Postfix 실행 방지 점검 및 조치
# 설명: 일반 사용자가 SMTP 서버 설정을 조작하거나 서비스 오류를 유발하는 것을 방지하기 위해
#       Sendmail의 PrivacyOptions 및 Postfix의 파일 권한 설정을 진단하고 조치합니다.
- name: 일반 사용자의 Sendmail/Postfix 실행 방지 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    sendmail_cf: /etc/mail/sendmail.cf
    postfix_sbin_path: /usr/sbin/postfix # Postfix 바이너리 경로

    # Sendmail PrivacyOptions에서 찾아야 할 값
    sendmail_privacy_option: "restrictqrun"
    sendmail_privacy_regex: '^\s*O\s+PrivacyOptions\s*=\s*(.*)$'

    # Postfix 파일 권한 및 소유자 기준
    postfix_expected_owner: "root"
    postfix_expected_group: "postfix"
    postfix_expected_mode: "0750" # rwxr-x---

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. Sendmail 프로세스 확인
    - name: Sendmail 프로세스 구동 여부 확인
      ansible.builtin.shell: "ps -ef | grep -q sendmail && echo 'running' || echo 'not running'"
      register: sendmail_process_check
      changed_when: false
      ignore_errors: true

    # 1.2. Postfix 서비스 상태 확인 (systemd 환경)
    - name: Postfix 서비스 상태 확인 (systemd)
      ansible.builtin.systemd:
        name: postfix
        state: started
      register: postfix_service_check
      ignore_errors: true
      when: ansible_service_mgr == 'systemd'

    # 1.3. Postfix 프로세스 확인 (systemd가 아닌 환경)
    - name: Postfix 프로세스 확인 (non-systemd)
      ansible.builtin.shell: "ps -ef | grep -q master && ps -ef | grep -q qmgr && echo 'running' || echo 'not running'"
      register: postfix_process_check
      changed_when: false
      ignore_errors: true
      when: ansible_service_mgr != 'systemd'

    # 1.4. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          sendmail_status: "미사용"
          postfix_status: "미사용"
          needs_sendmail_fix: false
          needs_postfix_fix: false

    # 1.5. Sendmail 'restrictqrun' 옵션 진단
    - name: Sendmail 'restrictqrun' 옵션 설정 진단
      block:
        - name: sendmail.cf 파일에서 PrivacyOptions 확인
          ansible.builtin.shell: "grep -E '{{ sendmail_privacy_regex }}' {{ sendmail_cf }} || true"
          register: sendmail_privacy_options_config
          changed_when: false
          ignore_errors: true

        - name: Sendmail 'restrictqrun' 취약점 진단 로직 적용
          ansible.builtin.set_fact:
            diagnosis_results: >-
              {{
                diagnosis_results | combine({
                  'sendmail_status': '사용 중',
                  'status': '취약',
                  'reasons': diagnosis_results.reasons + ['Sendmail PrivacyOptions에 ' + sendmail_privacy_option + ' 옵션이 설정되어 있지 않습니다.'],
                  'needs_sendmail_fix': true
                })
              }}
          when:
            - sendmail_privacy_options_config.stdout | default('') is not search(sendmail_privacy_option)
      when: sendmail_process_check.stdout == 'running'

    # 1.6. Postfix 파일 권한 및 그룹 진단
    - name: Postfix 파일 권한 및 그룹 설정 진단
      block:
        - name: Postfix 바이너리 파일({{ postfix_sbin_path }}) 속성 확인
          ansible.builtin.stat:
            path: "{{ postfix_sbin_path }}"
          register: postfix_binary_stat

        - name: Postfix 그룹 사용자 목록 확인
          ansible.builtin.command: "getent group postfix"
          register: postfix_group_users_raw
          changed_when: false
          ignore_errors: true # 그룹이 없을 수도 있으므로

        - name: Postfix 파일 권한 및 그룹 취약점 진단 로직 적용
          ansible.builtin.set_fact:
            diagnosis_results: >-
              {{
                diagnosis_results | combine({
                  'postfix_status': '사용 중',
                  'status': '취약',
                  'reasons': (diagnosis_results.reasons | default([])) + 
                             (['Postfix 바이너리 파일({{ postfix_sbin_path }})의 소유자(현재: ' + postfix_binary_stat.stat.pw_name + ', 예상: ' + postfix_expected_owner + ') 또는 그룹(현재: ' + postfix_binary_stat.stat.gr_name + ', 예상: ' + postfix_expected_group + ')이 적절하지 않습니다.'] if (postfix_binary_stat.stat.pw_name != postfix_expected_owner or postfix_binary_stat.stat.gr_name != postfix_expected_group) else []) +
                             (['Postfix 바이너리 파일({{ postfix_sbin_path }})의 권한(현재: ' + postfix_binary_stat.stat.mode + ', 예상: ' + postfix_expected_mode + ')이 너무 넓습니다.'] if (postfix_binary_stat.stat.mode != postfix_expected_mode) else []) +
                             (['Postfix 그룹에 일반 사용자가 포함되어 있습니다.'] if (postfix_group_users_raw.stdout | default('') is search('\\S+') and not (postfix_group_users_raw.stdout | default('') is search('root') and postfix_group_users_raw.stdout | default('') is not search('^[^:]+:[^:]*:[^:]*:[^,]+,[^:]+'))) else []), # root만 있거나 아무도 없어야 함
                  'needs_postfix_fix': true
                })
              }}
          when:
            - postfix_binary_stat.stat.exists # 파일이 존재해야 진단
            - (postfix_binary_stat.stat.pw_name != postfix_expected_owner or
               postfix_binary_stat.stat.gr_name != postfix_expected_group or
               postfix_binary_stat.stat.mode != postfix_expected_mode or
               (postfix_group_users_raw.stdout | default('') is search('\\S+') and not (postfix_group_users_raw.stdout | default('') is search('root') and postfix_group_users_raw.stdout | default('') is not search('^[^:]+:[^:]*:[^:]*:[^,]+,[^:]+')))) # root만 있거나 아무도 없어야 함
      when: (ansible_service_mgr == 'systemd' and postfix_service_check.status is defined and postfix_service_check.status.ActiveState == 'active') or (ansible_service_mgr != 'systemd' and postfix_process_check.stdout == 'running')

    # 1.7. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          Sendmail 상태: {{ diagnosis_results.sendmail_status }}
          Postfix 상태: {{ diagnosis_results.postfix_status }}
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            {% if diagnosis_results.needs_sendmail_fix %}
              - Sendmail: `/etc/mail/sendmail.cf` 파일의 `O PrivacyOptions=` 설정에 `restrictqrun` 옵션을 추가하십시오.
                (예: `O PrivacyOptions=authwarnings, novrfy, noexpn, restrictqrun`)
            {% endif %}
            {% if diagnosis_results.needs_postfix_fix %}
              - Postfix: `/usr/sbin/postfix` 파일의 소유자를 `root`, 그룹을 `postfix`, 권한을 `750`으로 설정하십시오.
                (예: `chown root:postfix /usr/sbin/postfix`, `chmod 750 /usr/sbin/postfix`)
              - `postfix` 그룹에 `root` 또는 관리자 계정만 포함되도록 하고, 일반 사용자를 제거하십시오.
                (예: `gpasswd -a <관리자계정> postfix`, `gpasswd -d <일반사용자> postfix`)
            {% endif %}
            - 변경 후에는 해당 메일 서비스(sendmail 또는 postfix)를 재시작해야 합니다.
          {% else %}
            SMTP 서비스가 사용되지 않거나, 일반 사용자의 실행 방지가 적절히 설정되어 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 조치: Sendmail 'restrictqrun' 옵션 추가
    - name: Sendmail 'restrictqrun' 옵션 추가 (조치)
      ansible.builtin.lineinfile:
        path: "{{ sendmail_cf }}"
        regexp: '^(O\s+PrivacyOptions\s*=.*)$'
        line: '\1, {{ sendmail_privacy_option }}'
        backrefs: yes
        state: present
        backup: yes
      when:
        - ansible_check_mode is not defined
        - diagnosis_results.needs_sendmail_fix
        - sendmail_process_check.stdout == 'running'
      notify: Restart Sendmail

    # 조치: Postfix 파일 권한 및 소유자/그룹 변경
    - name: Postfix 바이너리 파일 권한 및 소유자/그룹 변경 (조치)
      ansible.builtin.file:
        path: "{{ postfix_sbin_path }}"
        owner: "{{ postfix_expected_owner }}"
        group: "{{ postfix_expected_group }}"
        mode: "{{ postfix_expected_mode }}"
      when:
        - ansible_check_mode is not defined
        - diagnosis_results.needs_postfix_fix
        - postfix_binary_stat.stat.exists # 파일이 존재할 때만
        - (ansible_service_mgr == 'systemd' and postfix_service_check.status is defined and postfix_service_check.status.ActiveState == 'active') or (ansible_service_mgr != 'systemd' and postfix_process_check.stdout == 'running')
      notify: Restart Postfix

    # 조치: Postfix 그룹 관리 (예시: 일반 사용자 제거, 관리자 계정 추가는 수동 권고)
    # 일반 사용자 제거는 직접적인 사용자 계정 목록을 알아야 하므로 자동화하기 복잡합니다.
    # 여기서는 예시로 'postfix' 그룹에 'root' 또는 '관리자' 계정 외의 다른 사용자가 없는지 확인하는 로직을 사용합니다.
    # 실제 조치는 'gpasswd -d' 명령으로 일반 사용자를 수동으로 제거하도록 권고합니다.
    # 따라서, 이 부분은 조치 스텝에서 제외하고 안내만 하는 것이 더 안전합니다.
    # - name: Postfix 그룹에서 일반 사용자 제거 (수동 조치 권고)
    #   ansible.builtin.debug:
    #     msg: "Postfix 그룹에서 불필요한 일반 사용자를 수동으로 제거해야 합니다: gpasswd -d [사용자명] postfix"
    #   when:
    #     - ansible_check_mode is not defined
    #     - diagnosis_results.needs_postfix_fix
    #     - (postfix_group_users_raw.stdout | default('') is search('\\S+') and not (postfix_group_users_raw.stdout | default('') is search('root') and postfix_group_users_raw.stdout | default('') is not search('^[^:]+:[^:]*:[^:]*:[^,]+,[^:]+')))


  handlers:
    - name: Sendmail 재시작
      ansible.builtin.service:
        name: sendmail
        state: restarted
      when: sendmail_process_check.stdout == 'running'

    - name: Postfix 재시작
      ansible.builtin.service:
        name: postfix
        state: restarted
      when: (ansible_service_mgr == 'systemd' and postfix_service_check.status is defined and postfix_service_check.status.ActiveState == 'active') or (ansible_service_mgr != 'systemd' and postfix_process_check.stdout == 'running')
