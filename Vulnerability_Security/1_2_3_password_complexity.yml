---
# 플레이북 이름: 패스워드 복잡도 정책 점검 및 조치
# 설명: pam_pwquality 설정을 점검하여 기관 보안 정책에 적합한 패스워드 복잡도를 적용합니다.
- name: 패스워드 복잡도 정책 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # 패스워드 정책이 적용될 파일 목록 (우선순위 높음 -> 낮음)
    pam_config_files:
      - /etc/pam.d/common-password
      - /etc/security/pwquality.conf # systemd-based (e.g. newer Debian/Ubuntu, Fedora)
      - /etc/pam.d/system-auth      # RHEL/CentOS 계열

    # 권고하는 패스워드 복잡도 설정 패턴
    # retry=3은 있으면 좋고 없어도 치명적이진 않으나, 권고에 따라 점검 대상으로 포함.
    # minlen=8, lcredit=-1, dcredit=-1, ocredit=-1
    # enforce_for_root는 필수
    required_pwquality_params:
      - "minlen=8"
      - "lcredit=-1"
      - "dcredit=-1"
      - "ocredit=-1"
      - "enforce_for_root"
      - "retry=3" # 권고 사항

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          pwquality_file_used: "미확인"
          pwquality_current_config: []
          needs_fix: false

    # pwquality_config_file 및 pwquality_file_content 변수를 항상 초기화
    - name: PAM 설정 파일 변수 초기화
      ansible.builtin.set_fact:
        pwquality_config_file: ""
        pwquality_file_content: ""

    # 1.2. PAM 설정 파일 내용 읽기 및 분석
    - name: PAM 설정 파일 찾기 및 내용 읽기
      ansible.builtin.slurp:
        src: "{{ current_pam_file_path }}"
      register: pam_file_contents
      loop: "{{ pam_config_files }}"
      loop_control:
        loop_var: current_pam_file_path
      ignore_errors: true

    - name: pam_file_contents 결과 확인
      ansible.builtin.debug:
        var: pam_file_contents
        verbosity: 1 # <-- 여기 들여쓰기 수정
      # 이 태스크는 -v 이상의 verbosity로 실행될 때만 출력됩니다.

    - name: 유효한 PAM 설정 파일 선택 (실제 로직)
      ansible.builtin.set_fact:
        pwquality_config_file: "{{ slurp_result_item.item }}"
        pwquality_file_content: "{{ slurp_result_item.content | b64decode }}"
      loop: "{{ pam_file_contents.results }}"
      loop_control:
        loop_var: slurp_result_item
      when:
        - slurp_result_item.item is defined
        - slurp_result_item.stat is defined and slurp_result_item.stat.exists
        - slurp_result_item.stat.isreg
        - slurp_result_item.content is defined and slurp_result_item.content | length > 0

    - name: 선택된 pwquality_config_file 및 pwquality_file_content 확인
      ansible.builtin.debug:
        msg: "Selected config file: {{ pwquality_config_file }}, Content length: {{ pwquality_file_content | length }}"
        verbosity: 1
      when: pwquality_config_file is defined and pwquality_config_file != ""

    - name: 선택된 PAM 파일 확인 및 내용 진단 (pwquality_config_file이 정의된 경우)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'pwquality_file_used': pwquality_config_file
            })
          }}
      when: pwquality_config_file is defined and pwquality_config_file != ""

    - name: pwquality 설정 진단 및 파라미터 추출
      ansible.builtin.set_fact:
        temp_config_match: "{{ pwquality_file_content | default('') | regex_search('^\\s*password\\s+requisite\\s+pam_pwquality\\.so\\s+(.*)', multiline=True, reflags=re.IGNORECASE) }}"
      when: pwquality_config_file is defined and pwquality_config_file != ""

    - name: 현재 pwquality 설정 파라미터 리스트화
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'pwquality_current_config': (temp_config_match[1].split() | map('trim') | reject('equalto', '')) if temp_config_match and temp_config_match | length > 1 else []
            })
          }}
      when: temp_config_match is defined and temp_config_match | length > 1

    - name: 필수 pam_pwquality 파라미터 누락 여부 확인
      ansible.builtin.set_fact:
        missing_params: "{{ required_pwquality_params | difference(diagnosis_results.pwquality_current_config) }}"
      when: diagnosis_results.pwquality_current_config is defined

    - name: 진단 결과 업데이트 (설정 파일 없음 또는 잘못됨)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['적절한 pam_pwquality 설정 파일(common-password, pwquality.conf, system-auth 중 하나)을 찾을 수 없거나 설정이 올바르지 않습니다.'],
              'needs_fix': true
            })
          }}
      when: pwquality_config_file is not defined or pwquality_config_file == ""

    - name: 진단 결과 업데이트 (필수 파라미터 누락)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['pam_pwquality 설정에 다음 필수 파라미터가 누락되었습니다: {{ missing_params | join(", ") }}'],
              'needs_fix': true
            })
          }}
      when:
        - missing_params is defined
        - missing_params | length > 0
        - diagnosis_results.status == "양호"

    # 1.5. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          적용된 pam_pwquality 설정 파일: {{ diagnosis_results.pwquality_file_used }}
          현재 pam_pwquality 설정 (분석된 파라미터): {{ diagnosis_results.pwquality_current_config | join(" ") }}
          권고 설정 파라미터: {{ required_pwquality_params | join(" ") }}
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            {% if diagnosis_results.needs_fix %}
              - `{{ diagnosis_results.pwquality_file_used | default('/etc/pam.d/common-password 또는 /etc/security/pwquality.conf 또는 /etc/pam.d/system-auth') }}` 파일을 편집하여 아래 설정을 적용하십시오:
                `password requisite pam_pwquality.so {{ required_pwquality_params | join(" ") }}`
              - 특히 `enforce_for_root` 설정은 root 계정에도 정책이 적용되도록 합니다.
              - `retry=3`은 패스워드 입력 실패 시 재시도 횟수를 제한합니다.
            {% endif %}
          {% else %}
            패스워드 복잡도 설정이 기관 정책에 맞게 양호하게 적용되어 있습니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 (자동 조치) ---

    - name: pam_pwquality.so 설정 조치
      ansible.builtin.lineinfile:
        path: "{{ pwquality_config_file }}"
        regexp: '^\\s*password\\s+requisite\\s+pam_pwquality\\.so'
        line: "password requisite pam_pwquality.so {{ required_pwquality_params | join(' ') }}"
        state: present
        backup: yes
      when:
        - diagnosis_results.needs_fix
        - pwquality_config_file is defined and pwquality_config_file != ""
