---
# 플레이북 이름: DoS 공격에 취약한 서비스 비활성화 점검 및 조치
# 설명: 시스템 정보 유출 및 DoS(서비스 거부 공격) 방지를 위해
#       취약한 echo, discard, daytime, chargen 서비스의 활성화 여부를 진단하고 조치합니다.
- name: DoS 공격에 취약한 서비스 비활성화 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # 점검 및 조치할 DoS 취약 서비스의 xinetd 설정 파일 목록을 정의합니다.
    # 각 서비스에는 'dgram' (UDP) 및 'stream' (TCP) 버전이 있을 수 있습니다.
    vulnerable_services_files:
      - /etc/xinetd.d/echo-dgram    # UDP echo
      - /etc/xinetd.d/echo-stream   # TCP echo
      - /etc/xinetd.d/discard-dgram # UDP discard
      - /etc/xinetd.d/discard-stream # TCP discard
      - /etc/xinetd.d/daytime-dgram # UDP daytime
      - /etc/xinetd.d/daytime-stream # TCP daytime
      - /etc/xinetd.d/chargen-dgram # UDP chargen
      - /etc/xinetd.d/chargen-stream # TCP chargen
    
    # 서비스 설정에서 찾아야 할 활성화/비활성화 키와 값입니다.
    # 'disable = yes'를 확인하여 서비스가 비활성화되어 있는지 진단합니다.
    disable_key: 'disable'
    disable_value: 'yes'

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. 각 취약 서비스 파일의 상태를 확인합니다.
    - name: 취약 서비스 파일 ({{ item }}) 상태 확인
      ansible.builtin.stat:
        path: "{{ item }}"
      register: service_file_stat
      loop: "{{ vulnerable_services_files }}"
      loop_control:
        loop_var: item
      ignore_errors: true # 파일이 존재하지 않아도 오류로 처리하지 않습니다.

    # 1.2. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []

    # 1.3. 각 취약 서비스 파일의 내용을 확인하고 진단 로직을 적용합니다.
    # 파일이 존재하고 'disable = yes'가 설정되어 있지 않으면 취약으로 판단합니다.
    - name: 취약 서비스 파일 ({{ item.stat.path }}) 내용 확인 및 진단
      ansible.builtin.lineinfile:
        path: "{{ item.stat.path }}"
        regexp: '^\s*{{ disable_key }}\s*=\s*(no|yes)\s*$' # disable=no 또는 disable=yes 패턴을 찾습니다.
        line: "{{ disable_key }} = {{ disable_value }}"    # 'disable = yes' 라인
        state: present # 라인이 존재하는지 확인 (실제로 변경하지는 않음, check_mode 고려)
      check_mode: true # 이 태스크는 항상 check_mode로 실행하여 변경사항만 확인합니다.
      changed_when: false # 이 태스크는 실제 변경을 의도하지 않으므로, 항상 변경 없음으로 처리합니다.
      register: service_config_check
      loop: "{{ service_file_stat.results }}"
      loop_control:
        loop_var: item
      when: item.stat.exists # 파일이 존재할 때만 실행

    - name: 취약 서비스 진단 로직 적용
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'status': '취약',
              'reasons': diagnosis_results.reasons + ['' + item.item.stat.path + ' 파일이 존재하지만, ' + disable_key + ' = ' + disable_value + '로 설정되어 있지 않습니다.']
            })
          }}
      loop: "{{ service_config_check.results }}"
      loop_control:
        loop_var: item
      when:
        - item.item.stat.exists # 파일이 존재하고
        - item.item.stat.path in vulnerable_services_files # 검사 대상 파일 목록에 있으며
        - item.changed # lineinfile 모듈이 'changed'를 반환했다는 것은 'disable = yes'가 아니라는 의미

    # 1.4. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - `/etc/xinetd.d/` 디렉터리 내의 echo, discard, daytime, chargen 파일들에 대해
              `disable = yes` 설정을 추가 또는 변경하여 서비스를 비활성화하십시오.
            - 조치 후에는 `xinetd` 서비스를 재시작해야 합니다.
          {% else %}
            모든 DoS 공격에 취약한 서비스(echo, discard, daytime, chargen)가 비활성화되어 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 조치: 'disable = yes' 설정을 적용하여 취약 서비스를 비활성화합니다.
    - name: 취약 서비스 ({{ item.item.stat.path }}) 비활성화 조치 (disable = yes 설정)
      ansible.builtin.lineinfile:
        path: "{{ item.item.stat.path }}"
        regexp: '^\s*{{ disable_key }}\s*=\s*(no|yes)\s*$' # 기존 disable 설정을 찾습니다.
        line: "{{ disable_key }} = {{ disable_value }}"    # 'disable = yes'로 변경하거나 추가합니다.
        state: present # 라인이 존재하도록 보장
      loop: "{{ service_config_check.results }}" # 진단 단계에서 사용된 결과 재활용
      loop_control:
        loop_var: item
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 실제 조치 수행
        - item.item.stat.exists # 파일이 존재하고
        - item.changed # 진단 단계에서 'changed'가 있었다는 것은 조치가 필요하다는 의미

    # 조치 완료 메시지 출력 및 xinetd 서비스 재시작 안내
    - name: 조치 완료 메시지 및 xinetd 재시작 안내
      ansible.builtin.debug:
        msg: "DoS 취약 서비스들에 대한 비활성화 조치를 시도했습니다. 변경사항 적용을 위해 xinetd 서비스를 재시작해야 할 수 있습니다."
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 출력
        - diagnosis_results.status == '취약' # 취약점이 발견되어 조치가 시도되었을 경우

    # 선택 사항: xinetd 서비스 재시작
    # 실제 환경에서 필요하다고 판단될 경우 이 태스크의 주석을 해제하십시오.
    # - name: xinetd 서비스 재시작
    #   ansible.builtin.systemd:
    #     name: xinetd
    #     state: restarted
    #   when:
    #     - ansible_check_mode is not defined # --check 모드가 아닐 때만 실행
    #     - diagnosis_results.status == '취약' # 취약점이 발견되어 조치가 시도되었을 경우
