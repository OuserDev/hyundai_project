---
# 플레이북 이름: cron 파일 소유자 및 권한 설정 점검 및 조치
# 설명: root 외 일반 사용자의 crontab 명령어 사용으로 인한 시스템 피해 방지를 위해
#       /etc/cron.allow 및 /etc/cron.deny 파일의 소유자 및 권한을 진단하고 조치합니다.
- name: cron 파일 소유자 및 권한 설정 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # 점검 및 조치할 파일 목록을 정의합니다.
    cron_config_files:
      - /etc/cron.allow
      - /etc/cron.deny
    
    # 목표 소유자 및 권한을 정의합니다.
    target_owner: root
    target_mode: '0640' # YAML에서는 8진수 앞에 0을 붙입니다. (-rw-r-----)

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. 각 cron 설정 파일의 상태(소유자, 권한)를 확인합니다.
    - name: Cron 설정 파일 ({{ item }}) 상태 확인
      ansible.builtin.stat:
        path: "{{ item }}"
      register: cron_file_stat
      loop: "{{ cron_config_files }}"
      loop_control:
        loop_var: item
      ignore_errors: true # 파일이 존재하지 않아도 오류로 처리하지 않음

    # 1.2. 진단 결과 초기화 및 로직 적용
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
        
    # 1.3. 각 파일에 대한 진단 로직을 적용합니다.
    - name: 각 Cron 설정 파일 진단 로직 적용
      ansible.builtin.set_fact:
        diagnosis_results: "{{ diagnosis_results | combine({'status': '취약', 'reasons': diagnosis_results.reasons + [item.file_path + ' 파일의 소유자가 ' + target_owner + '이 아니거나, 권한이 ' + target_mode + '을(를) 초과합니다. (현재 소유자: ' + item.current_owner + ', 현재 권한: ' + item.current_mode + ')']}) }}"
      loop: "{{ cron_file_stat.results }}" # stat 모듈 결과 반복
      loop_control:
        loop_var: item
      when:
        - item.stat.exists # 파일이 존재할 때만 진단
        # 아래 두 줄이 문제의 핵심이었을 가능성이 높습니다.
        # when 조건이 여러 줄일 때, 각 줄은 리스트 항목으로 시작해야 하거나
        # 전체가 단일 문자열로 깔끔하게 구성되어야 합니다.
        # 여기서는 OR 조건으로 연결된 두 개의 개별 조건을 리스트 항목으로 명확히 구분합니다.
        - item.stat.pw_name != target_owner or item.stat.mode is version_compare(target_mode, '>')

    # 1.4. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - `/etc/cron.allow` 및 `/etc/cron.deny` 파일의 소유자를 root로, 권한을 640(-rw-r-----)으로 변경하십시오.
          {% else %}
            /etc/cron.allow 및 /etc/cron.deny 파일의 소유자 및 권한 설정이 양호합니다.
          {% endif %}
      when: diagnosis_results is defined # 진단 결과가 정의되어 있을 때만 출력

    # --- 2. 조치 섹션 시작 ---
    # --check 모드가 아닐 때만 실제 조치를 수행합니다.
    - name: 각 Cron 설정 파일 ({{ item }}) 소유자 및 권한 조치
      ansible.builtin.file:
        path: "{{ item.stat.path }}" # 파일 경로
        owner: "{{ target_owner }}"  # 목표 소유자
        mode: "{{ target_mode }}"    # 목표 권한 (0640)
      loop: "{{ cron_file_stat.results }}" # stat 모듈 결과 반복
      loop_control:
        loop_var: item
      when:
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 실행
        - item.stat.exists # 파일이 존재할 때만 조치 (새로 생성하지 않음, 진단 기준에 따라)
        # 조치 태스크의 when 조건도 위와 동일하게 수정합니다.
        - item.stat.pw_name != target_owner or item.stat.mode is version_compare(target_mode, '>')

    # 조치 후 메시지 출력
    - name: 조치 완료 메시지
      ansible.builtin.debug:
        msg: "Cron 설정 파일들의 소유자 및 권한 조치를 시도했습니다. 시스템에서 변경사항을 확인해보십시오."
      when: 
        - ansible_check_mode is not defined # --check 모드가 아닐 때만 출력
        - diagnosis_results.status == '취약' # 취약점이 발견되어 조치가 시도되었을 경우
