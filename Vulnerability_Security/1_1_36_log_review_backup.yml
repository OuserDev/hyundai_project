---
# 플레이북 이름: 로그의 정기적 검토 및 백업 점검
# 설명: 시스템 로그 서비스의 상태와 주요 로그 파일의 존재 여부 및 최근 업데이트를 진단하고,
#       로그의 정기적 검토 및 백업 정책 수립/준수 여부를 관리자에게 권고합니다.
- name: 로그의 정기적 검토 및 백업 점검
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # 주요 로그 파일 경로
    system_log_file: /var/log/messages
    auth_log_file: /var/log/auth.log # Debian/Ubuntu
    secure_log_file: /var/log/secure # CentOS/RHEL
    lastlog_file: /var/log/lastlog # 마지막 로그인 기록
    btmp_file: /var/log/btmp # 로그인 실패 기록
    wtmp_file: /var/log/wtmp # 로그인/로그아웃 기록

    # logrotate 설정 파일 경로 (주로 확인용)
    logrotate_conf_dir: /etc/logrotate.d/

    # 로그 파일이 최근에 업데이트되었는지 확인하는 기준 (초 단위)
    # 예: 24시간 이내에 업데이트된 경우 '양호'로 간주 (86400초)
    log_recent_update_threshold_seconds: 86400

  tasks:
    # --- 1. 진단 섹션 시작 ---

    # 1.1. syslog 또는 rsyslog 서비스 확인
    - name: syslog 또는 rsyslog 서비스 상태 확인
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      register: syslog_service_check
      ignore_errors: true
      loop:
        - rsyslog
        - syslog-ng # 일부 시스템에서 사용될 수 있음
        - syslog    # 구 버전 시스템 또는 다른 유형의 syslog 데몬
      failed_when: false # 어떤 서비스도 실행되지 않아도 실패로 간주하지 않음

    - name: syslog/rsyslog 서비스 구동 여부 결정
      ansible.builtin.set_fact:
        # 'status' 키가 없거나 'ActiveState' 키가 없는 경우를 대비하여 default({}) 사용
        is_syslog_running: "{{ (syslog_service_check.results | selectattr('status', 'defined') | selectattr('status.ActiveState', 'defined') | selectattr('status.ActiveState', 'equalto', 'active') | list | length > 0) }}"

    # 1.2. 진단 결과 초기화
    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "취약" # 기본값은 취약으로 설정하고, 조건을 만족하면 양호로 변경
          reasons: []
          syslog_service_status: "미사용 또는 비활성"
          log_files_status: []
          logrotate_config_status: "미확인 또는 불충분"
          needs_review_and_backup: true # 기본적으로 필요하다고 가정

    # 1.3. syslog/rsyslog 서비스 진단 결과 업데이트
    - name: syslog/rsyslog 서비스 상태 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'syslog_service_status': '사용 중'
            })
          }}
      when: is_syslog_running

    # 1.4. 주요 로그 파일 존재 및 최근 업데이트 확인
    - name: 주요 로그 파일 상태 확인
      ansible.builtin.stat:
        path: "{{ item }}"
      register: log_file_stats
      loop:
        - "{{ system_log_file }}"
        - "{{ auth_log_file }}"
        - "{{ secure_log_file }}"
        - "{{ lastlog_file }}"
        - "{{ btmp_file }}"
        - "{{ wtmp_file }}"
      ignore_errors: true # 파일이 없어도 오류로 간주하지 않음

    - name: 로그 파일 진단 결과 취합
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'log_files_status': diagnosis_results.log_files_status + [{
                'path': item.stat.path | default(item.invocation.module_args.path),
                'exists': item.stat.exists | default(false),
                'is_recent': (item.stat.exists | default(false) and (ansible_date_time.epoch | int - item.stat.mtime | default(0) | int < log_recent_update_threshold_seconds)) if (item.stat is defined and item.stat.exists is defined) else false
              }]
            })
          }}
      loop: "{{ log_file_stats.results }}"
      loop_control:
        label: "{{ item.stat.path | default(item.invocation.module_args.path | default('N/A')) }}"
      when: item.stat is defined # stat 모듈이 성공적으로 정보를 반환했을 때만 처리 (주로 실패한 항목 제외)

    # 1.5. logrotate 설정 확인 (존재 여부만)
    - name: logrotate 설정 파일 존재 여부 확인
      ansible.builtin.stat:
        path: "{{ logrotate_conf_dir }}"
      register: logrotate_dir_stat

    - name: logrotate 설정 상태 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'logrotate_config_status': '존재함 (상세 설정 검토 필요)'
            })
          }}
      when: logrotate_dir_stat.stat.exists and logrotate_dir_stat.stat.isdir

    # 1.6. 최종 진단 상태 결정
    - name: 최종 진단 상태 및 사유 결정
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'status': '양호'
            })
          }}
      when:
        - diagnosis_results.syslog_service_status == '사용 중'
        - diagnosis_results.log_files_status | selectattr('exists', 'equalto', true) | selectattr('is_recent', 'equalto', true) | list | length >= 1 # 최소 하나 이상의 로그 파일이 최근 업데이트됨
        - diagnosis_results.logrotate_config_status == '존재함 (상세 설정 검토 필요)' # logrotate 설정 디렉토리가 존재함
        - diagnosis_results.needs_review_and_backup == false # 이 변수는 수동으로 변경해야 양호가 됨, 여기서는 그냥 기본값으로 둠

    - name: 취약 사유 추가 (로그 서비스 비활성)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'reasons': diagnosis_results.reasons + ['시스템 로그 서비스(syslog/rsyslog)가 실행 중이지 않거나 비활성 상태입니다.']
            })
          }}
      when: diagnosis_results.syslog_service_status != '사용 중'

    - name: 취약 사유 추가 (주요 로그 파일 미갱신 또는 부재)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'reasons': diagnosis_results.reasons + ['주요 시스템 로그 파일이 존재하지 않거나, 최근에 업데이트되지 않았습니다.']
            })
          }}
      when: diagnosis_results.log_files_status | selectattr('exists', 'equalto', true) | selectattr('is_recent', 'equalto', true) | list | length == 0

    - name: 취약 사유 추가 (logrotate 설정 미흡)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{
            diagnosis_results | combine({
              'reasons': diagnosis_results.reasons + ['로그 파일 로테이션(logrotate) 설정이 불충분하거나 확인되지 않았습니다.']
            })
          }}
      when: diagnosis_results.logrotate_config_status != '존재함 (상세 설정 검토 필요)'

    # 1.7. 최종 진단 결과 출력
    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          시스템 로그 서비스 상태: {{ diagnosis_results.syslog_service_status }}
          주요 로그 파일 상태:
          {% for log_stat in diagnosis_results.log_files_status %}
            - {{ log_stat.path }}: {% if log_stat.exists %}존재함 (최근 업데이트: {% if log_stat.is_recent %}예{% else %}아니오{% endif %}){% else %}존재하지 않음{% endif %}
          {% endfor %}
          로그 로테이션 설정: {{ diagnosis_results.logrotate_config_status }}
          {% if diagnosis_results.reasons | length > 0 %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고 (관리적):
            - **로그 정책 수립:** 어떤 로그를, 얼마나 자주 기록하고, 어떻게 보관할 것인지에 대한 명확한 정책을 수립하십시오.
            - **로그 기록 관리:** `/etc/rsyslog.conf` 또는 `/etc/syslog.conf` 파일을 검토하여 필요한 로그가 적절히 기록되는지 확인하십시오.
            - **정기적인 로그 검토 및 분석:** 보안 담당자가 `su` 시도, 반복적인 로그인 실패, 로그인 거부 메시지 등 중요한 로그를 정기적으로 검토하고 분석하는 절차를 수립하십시오. (예: `grep "Failed password"` /var/log/auth.log)
            - **주기적인 로그 파일 백업:** `logrotate` 설정을 확인하고, 중요 로그 파일이 손실되지 않도록 주기적으로 안전한 위치에 백업하는 절차를 마련하십시오.
            - **중앙 집중식 로그 관리:** 가능하다면 SIEM(보안 정보 및 이벤트 관리) 시스템 등을 활용하여 로그를 중앙에서 수집하고 분석하는 것을 고려하십시오.
          {% else %}
            로그 서비스가 활성화되어 있고, 주요 로그 파일이 존재하며 최근에 업데이트되었습니다.
            하지만 로그의 "정기적 검토 및 백업"은 관리적 정책 및 수동적인 절차를 통해 이루어져야 합니다.
            수립된 로그 정책에 따라 주기적인 검토 및 백업을 수행하고 있는지 확인하십시오.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 (정보 제공 및 권고) ---
    # 이 플레이북은 로그 검토/분석/백업을 자동화하지 않습니다.
    # 이는 관리적 절차에 속하므로 수동 확인 및 조치를 강력히 권고합니다.
    - name: 조치 안내 메시지 (관리적)
      ansible.builtin.debug:
        msg: |
          로그의 정기적 검토 및 백업 점검이 완료되었습니다.
          **이 항목은 주로 관리적/운영적 정책 및 절차에 대한 것입니다.**
          플레이북은 시스템의 기술적 상태(로그 서비스, 파일 존재)만 진단합니다.
          위의 진단 결과와 조치 권고를 참조하여 **로그 검토/분석/백업 정책을 수립하고 철저히 이행하십시오.**
      when: not ansible_check_mode # --check 모드가 아닐 때만 출력
