---
# 플레이북 이름: OS에서 제공하는 침입차단 기능 활성화 점검 및 조치
# 설명: OS 내장 방화벽 (UFW 또는 Firewalld)의 활성화 여부를 진단하고 필요시 활성화 및 기본 규칙을 설정합니다.
- name: OS에서 제공하는 침입차단 기능 활성화 점검 및 조치
  hosts: localhost # 로컬 시스템(현재 실행 중인 호스트)을 대상으로 합니다.
  become: yes      # 관리자 권한(sudo)으로 태스크를 실행합니다.

  vars:
    # UFW 사용 시 기본적으로 허용할 포트 목록 (실제 환경에 맞게 추가/수정 필요)
    # SSH 접속이 끊어지는 것을 방지하기 위해 22번 포트 허용은 필수적입니다.
    required_open_ports:
      - 22/tcp  # SSH
      - 80/tcp  # HTTP (웹 서버 사용 시)
      - 443/tcp # HTTPS (웹 서버 사용 시)

  tasks:
    # --- 1. 진단 섹션 시작 ---

    - name: 진단 결과 초기화
      ansible.builtin.set_fact:
        diagnosis_results:
          status: "양호"
          reasons: []
          needs_fix: false
          ufw_status: "unknown" # active, inactive, not_installed
          firewalld_status: "unknown" # active, inactive, not_installed
          active_firewall_found: false
          os_info: {} # os_info 딕셔너리 초기화 (setup 모듈로 채워짐)

    # ansible_facts를 통해 OS 정보 수집
    - name: OS 정보 (ansible_facts) 수집
      ansible.builtin.setup:
        gather_subset:
          - distribution
          - os_family

    - name: OS 정보 설정 from ansible_facts
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'os_info': {
                  'description': ansible_facts.distribution | default('정보 없음') + ' ' + ansible_facts.distribution_version | default(''),
                  'codename': ansible_facts.distribution_codename | default('미확인'),
                  'distributor': ansible_facts.distribution | default('미확인')
              }
            }, recursive=True)
          }}

    - name: UFW 서비스 상태 확인
      ansible.builtin.command: ufw status
      register: ufw_check
      changed_when: false
      ignore_errors: true

    - name: Firewalld 서비스 상태 확인
      ansible.builtin.command: firewall-cmd --state
      register: firewalld_check
      changed_when: false
      ignore_errors: true

    - name: UFW 상태 진단 결과 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'ufw_status': 'active' if 'Status: active' in ufw_check.stdout else
                            ('inactive' if 'Status: inactive' in ufw_check.stdout else 'not_installed')
            })
          }}
      when: ufw_check.rc == 0 or ufw_check.rc == 1 # ufw status는 inactive일 때 rc=1

    - name: Firewalld 상태 진단 결과 업데이트
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'firewalld_status': 'active' if firewalld_check.stdout | default('') | trim == 'running' else
                                  ('inactive' if firewalld_check.rc == 0 else 'not_installed')
            })
          }}
      when: firewalld_check.rc == 0 or firewalld_check.rc == 1 # firewall-cmd --state는 running이 아니면 rc=1

    - name: 최종 진단 결과 업데이트 (취약 여부 판단)
      ansible.builtin.set_fact:
        diagnosis_results: >-
          {{ diagnosis_results | combine({
              'active_firewall_found': (diagnosis_results.ufw_status == 'active' or diagnosis_results.firewalld_status == 'active'),
              'status': '취약' if not (diagnosis_results.ufw_status == 'active' or diagnosis_results.firewalld_status == 'active') else '양호',
              'needs_fix': not (diagnosis_results.ufw_status == 'active' or diagnosis_results.firewalld_status == 'active'),
              'reasons': ['OS에서 제공하는 방화벽(UFW 또는 Firewalld)이 활성화되어 있지 않습니다.'] if not (diagnosis_results.ufw_status == 'active' or diagnosis_results.firewalld_status == 'active') else []
            })
          }}

    - name: 최종 진단 결과 출력
      ansible.builtin.debug:
        msg: |
          <진단 결과: {{ diagnosis_results.status }}>
          OS 배포판: {{ diagnosis_results.os_info.distributor | default('정보 없음') }}
          UFW 상태: {{ diagnosis_results.ufw_status }}
          Firewalld 상태: {{ diagnosis_results.firewalld_status }}

          {% if diagnosis_results.needs_fix %}
            세부 사유:
            {% for reason in diagnosis_results.reasons %}
              - {{ reason }}
            {% endfor %}
            조치 권고:
            - **시스템 보안 강화를 위해 OS 방화벽을 활성화하십시오.**
            - **경고: 방화벽 활성화 시 모든 인바운드 연결이 차단될 수 있습니다.**
              - 반드시 SSH (22/tcp), HTTP (80/tcp), HTTPS (443/tcp) 등 **필수적인 서비스 포트를 먼저 허용**하는 규칙을 추가한 후 방화벽을 활성화하십시오.
              - 예시: `ufw allow 22/tcp`, `ufw allow 80/tcp`, `ufw allow 443/tcp`
              - UFW 활성화: `ufw enable`
              - Firewalld 활성화: `systemctl start firewalld && systemctl enable firewalld` 후 `firewall-cmd --permanent --add-service=ssh --add-service=http --add-service=https && firewall-cmd --reload`
            - **Ansible 자동 조치 시에는 SSH 연결이 끊어지지 않도록 22/tcp 포트를 먼저 허용합니다.**
          {% else %}
            OS 방화벽(UFW 또는 Firewalld)이 활성화되어 있어 보안 설정이 양호합니다.
          {% endif %}
      when: diagnosis_results is defined

    # --- 2. 조치 섹션 시작 ---
    # 방화벽 활성화는 시스템 접근에 치명적인 영향을 줄 수 있으므로,
    # --check 모드가 아닐 때만 실행하고, SSH 포트 허용을 우선합니다.

    - name: UFW 설치 (필요시)
      ansible.builtin.apt: # Debian/Ubuntu
        name: ufw
        state: present
        update_cache: yes
      when:
        - ansible_facts.os_family == 'Debian' # ansible_facts 사용
        - diagnosis_results.ufw_status == 'not_installed'
        - diagnosis_results.needs_fix
        - ansible_check_mode is not defined or ansible_check_mode == false
      ignore_errors: true

    - name: Firewalld 서비스 비활성화 (firewalld와 충돌 방지)
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: no
      when:
        - diagnosis_results.firewalld_status == 'active'
        - diagnosis_results.ufw_status != 'active' # UFW가 활성 상태가 아니지만 조치 필요 시 firewalld를 끄고 UFW 킬 예정
        - diagnosis_results.needs_fix
        - ansible_check_mode is not defined or ansible_check_mode == false
      ignore_errors: true # firewalld가 설치되지 않았을 경우 오류 방지

    - name: UFW 기본 정책 설정 (모든 인바운드 거부, 모든 아웃바운드 허용)
      community.general.ufw:
        direction: incoming
        policy: deny
      when:
        - diagnosis_results.needs_fix
        - diagnosis_results.ufw_status != 'active'
        - ansible_check_mode is not defined or ansible_check_mode == false

    - name: UFW 필수 포트 허용
      community.general.ufw:
        rule: allow
        port: "{{ item.split('/')[0] }}"
        proto: "{{ item.split('/')[1] | default('any') }}" # 프로토콜이 명시되지 않으면 'any'
      loop: "{{ required_open_ports }}"
      when:
        - diagnosis_results.needs_fix
        - diagnosis_results.ufw_status != 'active'
        - ansible_check_mode is not defined or ansible_check_mode == false

    - name: UFW 활성화
      community.general.ufw:
        state: enabled
      when:
        - diagnosis_results.needs_fix
        - diagnosis_results.ufw_status != 'active'
        - ansible_check_mode is not defined or ansible_check_mode == false
