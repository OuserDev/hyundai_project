---
- name: 취약한 패스워드 사용 진단
  hosts: PostWebServers
  become: yes

  vars_files:
    - vars.yml
  vars:
    # 패스워드 복잡도 정책 설정값
    password_policy_settings:
      validate_password.length: 8
      validate_password.mixed_case_count: 1
      validate_password.number_count: 1
      validate_password.special_char_count: 1

  tasks:
    - name: MySQL 설치 여부 확인
      command: which mysql
      register: mysql_installed
      failed_when: false

    - name: MySQL 미설치 시 종료
      fail:
        msg: "MySQL이 설치되어 있지 않습니다."
      when: mysql_installed.rc != 0

    - name: MySQL 서비스 상태 확인
      systemd:
        name: mysql
      register: mysql_service_status

    - name: MySQL 서비스가 실행 중인지 확인
      fail: 
        msg: "MySQL 서비스가 실행되지 않고 있습니다"
      when: mysql_service_status.status.ActiveState != "active"
    
    - name: 컴포넌트 설치 여부 확인
      mysql_query:
        query: "SELECT component_urn FROM mysql.component WHERE component_urn = 'file://component_validate_password'"
      register: component_check
    
    - name: 컴포넌트 설치 상태 출력
      debug:
        msg: |
          {% if component_check.query_result is defined and component_check.query_result[0]|length > 0 %}
          패스워드 검증 컴포넌트가 이미 설치되어 있습니다.
          {% else %}
          패스워드 검증 컴포넌트가 설치되어 있지 않습니다.
          {% endif %}

    - name: 컴포넌트 설치
      mysql_query:
        query: "install component 'file://component_validate_password"
      when: component_check.query_result[0]|length <= 0
    
    - name: 컴포넌트 설치 상태 진단
      set_fact:
        component_installed: "{{ component_check.query_result is defined and component_check.query_result[0]|length > 0 }}"
    
    - name: 현재 패스워드 복잡도 설정 확인
      mysql_query:
        query: "SHOW VARIABLES LIKE 'validate_password%'"
      register: current_settings
      when: component_installed
      failed_when: false
    
    - name: print query
      debug:
        msg: "{{ current_settings }}"

    # 현재 설정값과 목표값 비교
    - name: 패스워드 정책 설정 상태 분석
      set_fact:
        policy_compliant: true
        settings_to_change: []
        current_settings_dict: {}
      when: component_installed

   # MySQL 쿼리 결과를 딕셔너리로 변환 (첫 번째 배열 요소 사용)
    - name: 현재 설정을 딕셔너리로 변환
      set_fact:
        current_settings_dict: "{{ current_settings_dict | combine({item.Variable_name: item.Value}) }}"
      loop: "{{ current_settings.query_result[0] | default([]) }}"
      when: 
        - component_installed
        - current_settings.query_result is defined
        - current_settings.query_result | length > 0

    - name: 변환된 설정 딕셔너리 확인
      debug:
        var: current_settings_dict
      when: component_installed

    - name: 설정값 비교 및 변경 필요 항목 확인
      set_fact:
        settings_to_change: "{{ settings_to_change + [{'name': item.key, 'current': current_value, 'target': item.value}] }}"
        policy_compliant: false
      vars:
        current_value: "{{ current_settings_dict.get(item.key, 'not_set') }}"
      when: 
        - component_installed
        - current_settings_dict is defined
        - current_value != (item.value | string)
      loop: "{{ password_policy_settings | dict2items }}"

    - name: 패스워드 복잡도 정책 설정
      mysql_query:
        query: "SET GLOBAL {{ item.key }} = {{ item.value }}"
      loop: "{{ password_policy_settings | dict2items }}"
      when: component_installed or component_install_result is succeeded
      register: policy_set_result

    - name: 설정 변경 결과 출력
      debug:
        msg: "패스워드 복잡도 정책이 성공적으로 적용되었습니다."
      when: policy_set_result is succeeded

    # 3. 검증 단계
    - name: 설정 적용 후 재확인
      mysql_query:
        query: "SHOW VARIABLES LIKE 'validate_password%'"
      register: final_settings
    
    - name: 설정 적용 후 출력
      debug:
        msg: "{{ final_settings }}"