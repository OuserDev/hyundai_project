---
- name: Install Nginx
  apt:
    name: nginx
    state: present

- name: Start and enable Nginx
  systemd:
    name: nginx
    enabled: yes
    state: started

- name: Remove default Nginx site
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/nginx/sites-enabled/default
    - /etc/nginx/sites-available/default

- name: Remove existing site configurations (cleanup)
  shell: |
    rm -f /etc/nginx/sites-enabled/{{ app_domain }}.conf
    rm -f /etc/nginx/sites-available/{{ app_domain }}.conf
  ignore_errors: yes

- name: Check for conflicting Nginx configurations
  shell: |
    # 기존 설정에서 중복 server_name 확인
    nginx -T 2>/dev/null | grep -i "server_name.*{{ app_domain }}" || true
  register: existing_configs
  ignore_errors: yes

- name: Show existing configurations
  debug:
    var: existing_configs.stdout_lines
  when: existing_configs.stdout != ""

- name: Create Nginx site configuration
  template:
    src: nginx-site.conf.j2
    dest: "/etc/nginx/sites-available/{{ app_domain }}.conf"
    backup: yes
  notify: reload nginx

- name: Enable site
  file:
    src: "/etc/nginx/sites-available/{{ app_domain }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ app_domain }}.conf"
    state: link
  notify: reload nginx

- name: Test Nginx configuration
  command: nginx -t
  register: nginx_test
  failed_when: nginx_test.rc != 0

- name: Show Nginx test result
  debug:
    var: nginx_test.stdout_lines

- name: Show Nginx test errors if any
  debug:
    var: nginx_test.stderr_lines
  when: nginx_test.stderr_lines is defined and nginx_test.stderr_lines|length > 0

- name: Restart Nginx if configuration is valid
  systemd:
    name: nginx
    state: restarted
  when: nginx_test.rc == 0

- name: Configure firewall for HTTP/HTTPS
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "80"
    - "443"